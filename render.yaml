# Render Blueprint for Nethesis Operation Center
# =============================================================================
# PRODUCTION ENVIRONMENT (my.nethesis.it)
# GitHub action deploy on releases only
# =============================================================================

databases:
  # Production PostgreSQL Database
  - name: my-postgres-prod
    plan: free
    databaseName: noc
    ipAllowList: []

  # QA PostgreSQL Database
  - name: my-postgres-qa
    plan: free
    databaseName: noc
    ipAllowList: []

services:
  # Production Redis Cache
  - type: keyvalue
    name: my-redis-prod
    plan: free
    maxmemoryPolicy: allkeys-lru
    ipAllowList: []

  # Production Backend API Server
  - type: web
    name: my-backend-prod
    runtime: go
    plan: free
    buildCommand: cd backend && make build && mkdir -p build/database && cp database/schema.sql build/database/
    startCommand: cd backend && ./build/backend
    healthCheckPath: /api/health
    envVars:
      # Server Configuration
      - key: GIN_MODE
        value: release
      - key: LISTEN_ADDRESS
        value: 0.0.0.0:10000
      - key: LOG_LEVEL
        value: info
      - key: LOG_FORMAT
        value: json

      # Redis Configuration
      - key: REDIS_URL
        fromService:
          type: keyvalue
          name: my-redis-prod
          property: connectionString
      - key: REDIS_DB
        value: 0

      # PostgreSQL Configuration
      - key: DATABASE_URL
        fromDatabase:
          name: my-postgres-prod
          property: connectionString

      # Environment-specific variables (configure in Render dashboard)
      - key: TENANT_ID
        sync: false
      - key: TENANT_DOMAIN
        sync: false
      - key: JWT_SECRET
        sync: false
      - key: BACKEND_APP_ID
        sync: false
      - key: BACKEND_APP_SECRET
        sync: false

    autoDeploy: false  # Deployed via GitHub Actions on release
    branch: main

  # Production Collect Service
  - type: web
    name: my-collect-prod
    runtime: go
    plan: free
    buildCommand: cd collect && go build -o build/collect main.go && mkdir -p build/database && cp database/schema.sql build/database/
    startCommand: cd collect && ./build/collect
    healthCheckPath: /api/health
    envVars:
      # Server Configuration
      - key: GIN_MODE
        value: release
      - key: LISTEN_ADDRESS
        value: 0.0.0.0:10000
      - key: LOG_LEVEL
        value: info
      - key: LOG_FORMAT
        value: json

      # Redis Configuration
      - key: REDIS_URL
        fromService:
          type: keyvalue
          name: my-redis-prod
          property: connectionString
      - key: REDIS_DB
        value: 1

      # PostgreSQL Configuration
      - key: DATABASE_URL
        fromDatabase:
          name: my-postgres-prod
          property: connectionString

    autoDeploy: false  # Deployed via GitHub Actions on release
    branch: main

  # =============================================================================
  # QA ENVIRONMENT (qa.my.nethesis.it)
  # Auto-deploys on every commit + PR previews
  # =============================================================================

  # QA Redis Cache
  - type: keyvalue
    name: my-redis-qa
    plan: free
    maxmemoryPolicy: allkeys-lru
    ipAllowList: []

  # QA Backend API Server
  - type: web
    name: my-backend-qa
    runtime: go
    plan: free
    buildCommand: cd backend && make build && mkdir -p build/database && cp database/schema.sql build/database/
    startCommand: cd backend && ./build/backend
    healthCheckPath: /api/health
    envVars:
      # Server Configuration
      - key: GIN_MODE
        value: debug
      - key: LISTEN_ADDRESS
        value: 0.0.0.0:10000
      - key: LOG_LEVEL
        value: debug
      - key: LOG_FORMAT
        value: json

      # Redis Configuration
      - key: REDIS_URL
        fromService:
          type: keyvalue
          name: my-redis-qa
          property: connectionString
      - key: REDIS_DB
        value: 0

      # PostgreSQL Configuration
      - key: DATABASE_URL
        fromDatabase:
          name: my-postgres-qa
          property: connectionString

      # Environment-specific variables (configure in Render dashboard)
      - key: TENANT_ID
        sync: false
      - key: TENANT_DOMAIN
        sync: false
      - key: JWT_SECRET
        sync: false
      - key: BACKEND_APP_ID
        sync: false
      - key: BACKEND_APP_SECRET
        sync: false

    autoDeploy: true   # Auto-deploy on every commit
    branch: main
    pullRequestPreviewsEnabled: true  # PR previews enabled

  # QA Collect Service
  - type: web
    name: my-collect-qa
    runtime: go
    plan: free
    buildCommand: cd collect && go build -o build/collect main.go && mkdir -p build/database && cp database/schema.sql build/database/
    startCommand: cd collect && ./build/collect
    healthCheckPath: /api/health
    envVars:
      # Server Configuration
      - key: GIN_MODE
        value: debug
      - key: LISTEN_ADDRESS
        value: 0.0.0.0:10000
      - key: LOG_LEVEL
        value: debug
      - key: LOG_FORMAT
        value: json

      # Redis Configuration
      - key: REDIS_URL
        fromService:
          type: keyvalue
          name: my-redis-qa
          property: connectionString
      - key: REDIS_DB
        value: 1

      # PostgreSQL Configuration
      - key: DATABASE_URL
        fromDatabase:
          name: my-postgres-qa
          property: connectionString

    autoDeploy: true   # Auto-deploy on every commit
    branch: main
    pullRequestPreviewsEnabled: true  # PR previews enabled

  # =============================================================================
  # FRONTEND SERVICES
  # =============================================================================

  # Production Frontend
  - type: web
    name: my-frontend-prod
    runtime: docker
    plan: free
    rootDir: frontend
    dockerfilePath: Dockerfile
    healthCheckPath: /health
    envVars: []
    autoDeploy: false  # Deployed via GitHub Actions on release
    branch: main

  # QA Frontend
  - type: web
    name: my-frontend-qa
    runtime: docker
    plan: free
    rootDir: frontend
    dockerfilePath: Dockerfile
    healthCheckPath: /health
    envVars: []
    autoDeploy: true   # Auto-deploy on every commit
    branch: main
    pullRequestPreviewsEnabled: true  # PR previews enabled

  # =============================================================================
  # PRODUCTION PROXY (my.nethesis.it)
  # Single entry point for all services
  # =============================================================================
  - type: web
    name: my-proxy-prod
    runtime: docker
    plan: free
    rootDir: proxy
    dockerfilePath: Dockerfile
    healthCheckPath: /health
    envVars:
      # Service names for automatic URL generation
      - key: BACKEND_SERVICE_NAME
        value: my-backend-prod
      - key: COLLECT_SERVICE_NAME
        value: my-collect-prod
      - key: FRONTEND_SERVICE_NAME
        value: my-frontend-prod

    autoDeploy: false  # Deployed via GitHub Actions on release
    branch: main

  # =============================================================================
  # QA PROXY (qa.my.nethesis.it)
  # Single entry point for QA services
  # =============================================================================
  - type: web
    name: my-proxy-qa
    runtime: docker
    plan: free
    rootDir: proxy
    dockerfilePath: Dockerfile
    healthCheckPath: /health
    envVars:
      # Service names for automatic URL generation
      - key: BACKEND_SERVICE_NAME
        value: my-backend-qa
      - key: COLLECT_SERVICE_NAME
        value: my-collect-qa
      - key: FRONTEND_SERVICE_NAME
        value: my-frontend-qa

    autoDeploy: true   # Auto-deploy on every commit
    branch: main
    pullRequestPreviewsEnabled: true  # PR previews enabled