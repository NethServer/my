# Render Blueprint for My Nethesis
# =============================================================================
# Architecture: Private services exposed via proxy
# PRODUCTION: my.nethesis.it (release-based deployment)
# QA: qa.my.nethesis.it (auto-deploy + PR previews)
# =============================================================================

# =============================================================================
# DATABASES
# =============================================================================

databases:
  # Production PostgreSQL Database
  - name: my-postgres-prod
    plan: free
    databaseName: noc
    ipAllowList: []

  # QA PostgreSQL Database
  - name: my-postgres-qa
    plan: free
    databaseName: noc
    ipAllowList: []

services:
# =============================================================================
# PRODUCTION ENVIRONMENT - my.nethesis.it
# Release-based deployment (GitHub Actions)
# =============================================================================

  # Production Redis Cache
  - type: keyvalue
    name: my-redis-prod
    plan: free
    maxmemoryPolicy: allkeys-lru
    ipAllowList: []

  # Production Backend API Server (Private Service)
  - type: web
    name: my-backend-prod
    runtime: image
    plan: free
    image:
      url: ghcr.io/nethserver/my/backend:latest
    envVars:
      # Server Configuration
      - key: GIN_MODE
        value: release
      - key: LISTEN_ADDRESS
        value: 0.0.0.0:10000
      - key: LOG_LEVEL
        value: info
      - key: LOG_FORMAT
        value: json

      # Redis Configuration
      - key: REDIS_URL
        fromService:
          type: keyvalue
          name: my-redis-prod
          property: connectionString
      - key: REDIS_DB
        value: 0

      # PostgreSQL Configuration
      - key: DATABASE_URL
        fromDatabase:
          name: my-postgres-prod
          property: connectionString

      # Environment-specific variables (configure in Render dashboard)
      - key: TENANT_ID
        sync: false
      - key: TENANT_DOMAIN
        sync: false
      - key: JWT_SECRET
        sync: false
      - key: BACKEND_APP_ID
        sync: false
      - key: BACKEND_APP_SECRET
        sync: false


  # Production Collect Service (Private Service)
  - type: web
    name: my-collect-prod
    runtime: image
    plan: free
    image:
      url: ghcr.io/nethserver/my/collect:latest
    envVars:
      # Server Configuration
      - key: GIN_MODE
        value: release
      - key: LISTEN_ADDRESS
        value: 0.0.0.0:10000
      - key: LOG_LEVEL
        value: info
      - key: LOG_FORMAT
        value: json

      # Redis Configuration
      - key: REDIS_URL
        fromService:
          type: keyvalue
          name: my-redis-prod
          property: connectionString
      - key: REDIS_DB
        value: 1

      # PostgreSQL Configuration
      - key: DATABASE_URL
        fromDatabase:
          name: my-postgres-prod
          property: connectionString


  # Production Frontend (Private Service)
  - type: web
    name: my-frontend-prod
    runtime: image
    plan: free
    image:
      url: ghcr.io/nethserver/my/frontend:latest
    envVars:
      - key: VITE_PRODUCT_NAME
        value: "My Nethesis"
      - key: VITE_LOGTO_ENDPOINT
        sync: false  # Configure in Render dashboard
      - key: VITE_LOGTO_APP_ID
        sync: false  # Configure in Render dashboard
      - key: VITE_API_BASE_URL
        value: "/backend/api"
      - key: VITE_SIGNIN_REDIRECT_URI
        value: "login-redirect"
      - key: VITE_SIGNOUT_REDIRECT_URI
        value: "login"

  # Production Proxy - Public Entry Point (my.nethesis.it)
  - type: web
    name: my-proxy-prod
    runtime: image
    plan: free
    image:
      url: ghcr.io/nethserver/my/proxy:latest
    domains:
      - my.nethesis.it
    envVars:
      # Service names for automatic URL generation
      - key: BACKEND_SERVICE_NAME
        value: my-backend-prod
      - key: COLLECT_SERVICE_NAME
        value: my-collect-prod
      - key: FRONTEND_SERVICE_NAME
        value: my-frontend-prod


# =============================================================================
# QA ENVIRONMENT - qa.my.nethesis.it
# Auto-deploy on every commit + PR previews
# =============================================================================

  # QA Redis Cache
  - type: keyvalue
    name: my-redis-qa
    plan: free
    maxmemoryPolicy: allkeys-lru
    ipAllowList: []

  # QA Backend API Server (Private Service)
  - type: web
    name: my-backend-qa
    runtime: docker
    plan: free
    rootDir: backend
    dockerfilePath: Containerfile
    envVars:
      # Server Configuration
      - key: GIN_MODE
        value: debug
      - key: LISTEN_ADDRESS
        value: 0.0.0.0:10000
      - key: LOG_LEVEL
        value: debug
      - key: LOG_FORMAT
        value: json

      # Redis Configuration
      - key: REDIS_URL
        fromService:
          type: keyvalue
          name: my-redis-qa
          property: connectionString
      - key: REDIS_DB
        value: 0

      # PostgreSQL Configuration
      - key: DATABASE_URL
        fromDatabase:
          name: my-postgres-qa
          property: connectionString

      # Environment-specific variables (configure in Render dashboard)
      - key: TENANT_ID
        sync: false
      - key: TENANT_DOMAIN
        sync: false
      - key: JWT_SECRET
        sync: false
      - key: BACKEND_APP_ID
        sync: false
      - key: BACKEND_APP_SECRET
        sync: false

    autoDeploy: true   # Auto-deploy on every commit
    branch: main
    pullRequestPreviewsEnabled: true  # PR previews enabled

  # QA Collect Service (Private Service)
  - type: web
    name: my-collect-qa
    runtime: docker
    plan: free
    rootDir: collect
    dockerfilePath: Containerfile
    envVars:
      # Server Configuration
      - key: GIN_MODE
        value: debug
      - key: LISTEN_ADDRESS
        value: 0.0.0.0:10000
      - key: LOG_LEVEL
        value: debug
      - key: LOG_FORMAT
        value: json

      # Redis Configuration
      - key: REDIS_URL
        fromService:
          type: keyvalue
          name: my-redis-qa
          property: connectionString
      - key: REDIS_DB
        value: 1

      # PostgreSQL Configuration
      - key: DATABASE_URL
        fromDatabase:
          name: my-postgres-qa
          property: connectionString

    autoDeploy: true   # Auto-deploy on every commit
    branch: main
    pullRequestPreviewsEnabled: true  # PR previews enabled

  # QA Frontend (Private Service)
  - type: web
    name: my-frontend-qa
    runtime: docker
    plan: free
    rootDir: frontend
    dockerfilePath: Containerfile
    envVars:
      - key: VITE_PRODUCT_NAME
        value: "My Nethesis"
      - key: VITE_LOGTO_ENDPOINT
        sync: false  # Configure in Render dashboard
      - key: VITE_LOGTO_APP_ID
        sync: false  # Configure in Render dashboard
      - key: VITE_API_BASE_URL
        value: "/backend/api"
      - key: VITE_SIGNIN_REDIRECT_URI
        value: "login-redirect"
      - key: VITE_SIGNOUT_REDIRECT_URI
        value: "login"
    autoDeploy: true   # Auto-deploy on every commit
    branch: main
    pullRequestPreviewsEnabled: true  # PR previews enabled

  # QA Proxy - Public Entry Point (qa.my.nethesis.it)
  - type: web
    name: my-proxy-qa
    runtime: docker
    plan: free
    rootDir: proxy
    dockerfilePath: Containerfile
    domains:
      - qa.my.nethesis.it
    envVars:
      # Service names for automatic URL generation
      - key: BACKEND_SERVICE_NAME
        value: my-backend-qa
      - key: COLLECT_SERVICE_NAME
        value: my-collect-qa
      - key: FRONTEND_SERVICE_NAME
        value: my-frontend-qa

    autoDeploy: true   # Auto-deploy on every commit
    branch: main
    pullRequestPreviewsEnabled: true  # PR previews enabled