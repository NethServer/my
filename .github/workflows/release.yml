name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  SYNC_IMAGE_NAME: ${{ github.repository }}/sync

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    # Backend Release
    - name: Build backend binary
      working-directory: backend
      run: |
        # Build for multiple platforms
        mkdir -p dist
        
        # Linux AMD64
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o dist/backend-linux-amd64 main.go
        
        # Linux ARM64
        GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-s -w" -o dist/backend-linux-arm64 main.go
        
        # macOS AMD64
        GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o dist/backend-darwin-amd64 main.go
        
        # macOS ARM64
        GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-s -w" -o dist/backend-darwin-arm64 main.go
        
        # Create archives
        cd dist
        tar -czf backend-linux-amd64.tar.gz backend-linux-amd64
        tar -czf backend-linux-arm64.tar.gz backend-linux-arm64
        tar -czf backend-darwin-amd64.tar.gz backend-darwin-amd64
        tar -czf backend-darwin-arm64.tar.gz backend-darwin-arm64
    
    # Sync Release
    - name: Build sync binary
      working-directory: sync
      run: |
        # Build for multiple platforms
        mkdir -p dist
        
        # Linux AMD64
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o dist/sync-linux-amd64 ./cmd/sync/main.go
        
        # Linux ARM64
        GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-s -w" -o dist/sync-linux-arm64 ./cmd/sync/main.go
        
        # macOS AMD64
        GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o dist/sync-darwin-amd64 ./cmd/sync/main.go
        
        # macOS ARM64
        GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-s -w" -o dist/sync-darwin-arm64 ./cmd/sync/main.go
        
        # Create archives with configs
        cd dist
        for binary in sync-*; do
          if [[ "$binary" != *.tar.gz ]]; then
            mkdir -p "${binary}-release"
            cp "$binary" "${binary}-release/sync"
            cp -r ../configs "${binary}-release/"
            tar -czf "${binary}.tar.gz" "${binary}-release"
            rm -rf "${binary}-release"
          fi
        done
    
    # Docker Images with multi-platform support
    - name: Extract backend metadata
      id: backend_meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=semver,pattern=v{{version}},value=${{ steps.version.outputs.VERSION }}
          type=raw,value=latest
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: backend
        file: backend/Containerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.backend_meta.outputs.tags }}
        labels: |
          org.opencontainers.image.title=Nethesis Operation Center Backend
          org.opencontainers.image.description=Backend API for Nethesis Operation Center
          org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Extract sync metadata
      id: sync_meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.SYNC_IMAGE_NAME }}
        tags: |
          type=semver,pattern=v{{version}},value=${{ steps.version.outputs.VERSION }}
          type=raw,value=latest
    
    - name: Build and push sync Docker image
      uses: docker/build-push-action@v5
      with:
        context: sync
        file: sync/Containerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.sync_meta.outputs.tags }}
        labels: |
          org.opencontainers.image.title=Nethesis Operation Center Sync
          org.opencontainers.image.description=CLI tool for syncing RBAC configuration with Logto
          org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # Generate release notes
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "First release of Nethesis Operation Center" >> CHANGELOG.md
        fi
        
        echo "## Docker Images" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "- \`ghcr.io/${{ github.repository }}/backend:${{ steps.version.outputs.VERSION }}\`" >> CHANGELOG.md
        echo "- \`ghcr.io/${{ github.repository }}/sync:${{ steps.version.outputs.VERSION }}\`" >> CHANGELOG.md
    
    # Create GitHub Release
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
        files: |
          backend/dist/*.tar.gz
          sync/dist/*.tar.gz
        generate_release_notes: true