name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  SYNC_IMAGE_NAME: ${{ github.repository }}/sync
  COLLECT_IMAGE_NAME: ${{ github.repository }}/collect
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend
  PROXY_IMAGE_NAME: ${{ github.repository }}/proxy

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: false  # Disable automatic cache, we'll handle it manually

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-backend-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-backend-

    - name: Download dependencies
      run: go mod download

    - name: Run tests with coverage
      run: go test -coverprofile=coverage.out -coverpkg=./... ./...

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: backend/coverage.out
        retention-days: 30

    - name: Run go vet
      run: go vet ./...

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run linting
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        working-directory: backend
        args: --timeout=10m

  sync-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: sync

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'  # Updated to match other jobs
        cache: false  # Disable automatic cache, we'll handle it manually

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-sync-${{ hashFiles('sync/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-sync-

    - name: Download dependencies
      run: go mod download

    - name: Run tests with coverage
      run: make test-coverage

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sync-coverage
        path: sync/coverage.out
        retention-days: 30

    - name: Check formatting
      run: make fmt

    - name: Run linting
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        working-directory: sync
        args: --timeout=10m

  collect-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: collect

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: false  # Disable automatic cache, we'll handle it manually

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-collect-${{ hashFiles('collect/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-collect-

    - name: Download dependencies
      run: go mod download

    - name: Run tests with coverage
      run: go test -coverprofile=coverage.out -coverpkg=./... ./...

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: collect-coverage
        path: collect/coverage.out
        retention-days: 30

    - name: Run go vet
      run: go vet ./...

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run linting
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        working-directory: collect
        args: --timeout=10m

  backend-build:
    runs-on: ubuntu-latest
    needs: backend-tests
    permissions:
      contents: read
      packages: write
      security-events: write
      actions: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: backend
        file: backend/Containerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Security scanning (only on main)
    - name: Generate Trivy SARIF report
      uses: aquasecurity/trivy-action@0.28.0
      if: github.ref == 'refs/heads/main'
      with:
        scan-type: 'fs'
        scan-ref: './backend'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'
        github-pat: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: github.ref == 'refs/heads/main'
      with:
        sarif_file: 'trivy-backend-results.sarif'

  sync-build:
    runs-on: ubuntu-latest
    needs: sync-tests
    permissions:
      contents: read
      packages: write
      security-events: write
      actions: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.SYNC_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: sync
        file: sync/Containerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Security scanning (only on main)
    - name: Generate Trivy SARIF report
      uses: aquasecurity/trivy-action@0.28.0
      if: github.ref == 'refs/heads/main'
      with:
        scan-type: 'fs'
        scan-ref: './sync'
        format: 'sarif'
        output: 'trivy-sync-results.sarif'
        github-pat: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: github.ref == 'refs/heads/main'
      with:
        sarif_file: 'trivy-sync-results.sarif'

  collect-build:
    runs-on: ubuntu-latest
    needs: collect-tests
    permissions:
      contents: read
      packages: write
      security-events: write
      actions: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.COLLECT_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: collect
        file: collect/Containerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Security scanning (only on main)
    - name: Generate Trivy SARIF report
      uses: aquasecurity/trivy-action@0.28.0
      if: github.ref == 'refs/heads/main'
      with:
        scan-type: 'fs'
        scan-ref: './collect'
        format: 'sarif'
        output: 'trivy-collect-results.sarif'
        github-pat: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: github.ref == 'refs/heads/main'
      with:
        sarif_file: 'trivy-collect-results.sarif'

  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Check formatting
      run: npm run format

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run tests
      run: npm run test

    - name: Run build (test compilation)
      run: npm run build

  frontend-build:
    runs-on: ubuntu-latest
    needs: frontend-tests
    permissions:
      contents: read
      packages: write
      security-events: write
      actions: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: frontend
        file: frontend/Containerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Security scanning (only on main)
    - name: Generate Trivy SARIF report
      uses: aquasecurity/trivy-action@0.28.0
      if: github.ref == 'refs/heads/main'
      with:
        scan-type: 'fs'
        scan-ref: './frontend'
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'
        github-pat: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: github.ref == 'refs/heads/main'
      with:
        sarif_file: 'trivy-frontend-results.sarif'

  proxy-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      actions: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.PROXY_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: proxy
        file: proxy/Containerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Security scanning (only on main)
    - name: Generate Trivy SARIF report
      uses: aquasecurity/trivy-action@0.28.0
      if: github.ref == 'refs/heads/main'
      with:
        scan-type: 'fs'
        scan-ref: './proxy'
        format: 'sarif'
        output: 'trivy-proxy-results.sarif'
        github-pat: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: github.ref == 'refs/heads/main'
      with:
        sarif_file: 'trivy-proxy-results.sarif'
