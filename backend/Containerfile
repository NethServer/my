# Build stage
FROM golang:1.23.4-alpine AS builder

# Install git and ca-certificates (if needed for private repositories)
RUN apk add --no-cache git ca-certificates

# Set working directory
WORKDIR /app

# Copy build trigger file to force rebuilds when it changes
COPY .render-build-trigger /tmp/build-trigger

# Copy go mod files first for better caching
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application with version information
RUN echo "=== Build Environment Debug ===" && \
    echo "All environment variables:" && \
    env | sort && \
    echo "RENDER_GIT_BRANCH value: [${RENDER_GIT_BRANCH}]" && \
    echo "RENDER_GIT_COMMIT value: [${RENDER_GIT_COMMIT}]" && \
    echo "============================" && \
    VERSION=${RENDER_GIT_BRANCH:-dev} && \
    COMMIT=${RENDER_GIT_COMMIT:-unknown} && \
    BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ) && \
    echo "Final values: VERSION=$VERSION COMMIT=$COMMIT BUILD_TIME=$BUILD_TIME" && \
    CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo \
    -ldflags "-X github.com/nethesis/my/backend/pkg/version.Version=${VERSION} \
              -X github.com/nethesis/my/backend/pkg/version.Commit=${COMMIT} \
              -X github.com/nethesis/my/backend/pkg/version.BuildTime=${BUILD_TIME}" \
    -o backend main.go

# Final stage
FROM alpine:3.21

# Install ca-certificates for HTTPS requests
RUN apk --no-cache add ca-certificates

# Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

WORKDIR /app

# Copy the binary from builder stage
COPY --from=builder /app/backend .

# Copy database schema (needed for new installations)
COPY --from=builder /app/database/schema.sql database/

# Copy email templates
COPY --from=builder /app/services/email/templates/ services/email/templates/

# Change ownership of the application directory
RUN chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose port 8080 (default for the backend)
EXPOSE 8080

# Command to run the application
CMD ["./backend"]