openapi: 3.0.3
info:
  title: My Nethesis API
  description: REST API for My Nethesis with business hierarchy management and RBAC
  version: 0.2.0
  contact:
    name: Nethesis S.r.l.
    url: http://www.nethesis.it
    email: info@nethesis.it
  license:
    name: AGPL-3.0-or-later
    url: https://www.gnu.org/licenses/agpl-3.0.html

servers:
  - url: https://api.your-domain.com/api
    description: Backend API server (port 8080)
  - url: https://collect.your-domain.com/api
    description: Collect API server (port 8081)

tags:

  - name: Backend - Applications
    description: Backend third-party application management
  - name: Backend - Authentication
    description: Backend public authentication and token management
  - name: Backend - Me
    description: Backend authenticated user profile management
  - name: Backend - Customers
    description: Backend customer management
  - name: Backend - Distributors
    description: Backend distributor management
  - name: Backend - Health
    description: Backend service health monitoring
  - name: Backend - Organizations
    description: Backend organization hierarchy management
  - name: Backend - Resellers
    description: Backend reseller management
  - name: Backend - Roles
    description: Backend role management
  - name: Backend - Systems
    description: Backend system management and inventory
  - name: Backend - User
    description: Backend user profile and permissions
  - name: Backend - Users
    description: Backend user management with RBAC
  - name: Backend - Validators
    description: Backend validation endpoints for real-time checks
  - name: Backend - Impersonation
    description: Backend consent-based user impersonation system


  - name: Collect - Health
    description: Collect service health and monitoring
  - name: Collect - Systems
    description: Collect service system management and inventory collection

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token from auth exchange endpoint
    BasicAuth:
      type: http
      scheme: basic
      description: HTTP Basic authentication for system inventory collection

  schemas:
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: HTTP error code
          example: 400
        message:
          type: string
          description: Error message
          example: "validation failed"
        data:
          $ref: '#/components/schemas/ErrorData'

    ErrorData:
      type: object
      properties:
        type:
          type: string
          enum: [validation_error, external_api_error]
          description: Type of error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        details:
          description: Additional error details

    ValidationError:
      type: object
      properties:
        key:
          type: string
          description: Field name that failed validation
          example: "username"
        message:
          type: string
          description: Error code or message
          example: "required"
        value:
          type: string
          description: Value that failed validation
          example: ""

    VATValidationResponse:
      type: object
      properties:
        exists:
          type: boolean
          description: Whether the VAT number exists in the specified entity type
          example: true

    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          description: Current page number
          example: 1
        page_size:
          type: integer
          minimum: 1
          maximum: 100
          description: Number of items per page
          example: 20
        total_count:
          type: integer
          minimum: 0
          description: Total number of items
          example: 156
        total_pages:
          type: integer
          minimum: 0
          description: Total number of pages
          example: 8
        has_next:
          type: boolean
          description: Whether there is a next page
          example: true
        has_prev:
          type: boolean
          description: Whether there is a previous page
          example: false
        next_page:
          type: integer
          nullable: true
          description: Next page number if available
          example: 2
        prev_page:
          type: integer
          nullable: true
          description: Previous page number if available
          example: null
        sort_by:
          type: string
          nullable: true
          description: Field used for sorting
          example: "name"
        sort_direction:
          type: string
          nullable: true
          enum: ["asc", "desc"]
          description: Sort direction
          example: "asc"

    TokenExchangeRequest:
      type: object
      required:
        - access_token
      properties:
        access_token:
          type: string
          description: Logto access token to exchange
          example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."

    TokenRefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          description: Refresh token to exchange for new access token
          example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."

    ChangePasswordRequest:
      type: object
      required:
        - current_password
        - new_password
      properties:
        current_password:
          type: string
          description: Current user password for verification
          example: "MyCurrentP4ssw0rd!"
        new_password:
          type: string
          minLength: 12
          maxLength: 128
          description: |
            New password meeting security requirements:
            - At least 12 characters long
            - At least one uppercase letter (A-Z)
            - At least one lowercase letter (a-z)
            - At least one digit (0-9)
            - At least one special character (!@#$%^&*...)
            - No more than 3 consecutive identical characters
            - Cannot contain common weak patterns
          example: "MyNewSecureP4ssw0rd!"

    ChangeInfoRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          description: User's full name (cannot be empty if provided)
          example: "John Doe"
        email:
          type: string
          format: email
          minLength: 1
          description: User's email address (cannot be empty if provided)
          example: "john.doe@example.com"
        phone:
          type: string
          nullable: true
          description: User's phone number (can be empty to remove)
          example: "+39 333 123456"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token (24h)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          description: Refresh token (7 days)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 86400
        user:
          $ref: '#/components/schemas/UserProfile'

    UserProfile:
      type: object
      properties:
        id:
          type: string
          description: User ID
          example: "user_123456789"
        logto_id:
          type: string
          nullable: true
          description: Logto user ID
          example: "user_abc123def456"
        username:
          type: string
          description: Username
          example: "john.doe"
        email:
          type: string
          format: email
          description: User email address
          example: "john@example.com"
        name:
          type: string
          description: Full name
          example: "John Doe"
        phone:
          type: string
          nullable: true
          description: Phone number
          example: "+39 333 123456"
        user_roles:
          type: array
          items:
            type: string
          description: User role names
          example: ["Admin"]
        user_role_ids:
          type: array
          items:
            type: string
          description: User role IDs
          example: ["rol_admin_id_123"]
        user_permissions:
          type: array
          items:
            type: string
          description: User permissions from roles
          example: ["destroy:systems", "manage:systems", "read:systems"]
        org_role:
          type: string
          description: Organization role name
          example: "Owner"
        org_role_id:
          type: string
          description: Organization role ID
          example: "org_rol_owner_456"
        org_permissions:
          type: array
          items:
            type: string
          description: Organization permissions
          example: ["create:distributors", "manage:distributors"]
        organization_id:
          type: string
          description: Organization ID
          example: "org_123"
        organization_name:
          type: string
          description: Organization name
          example: "ACME Distribution"

    Organization:
      type: object
      properties:
        id:
          type: string
          description: Organization ID
          example: "org_123456789"
        name:
          type: string
          description: Organization name
          example: "ACME Distribution SpA"
        description:
          type: string
          description: Organization description
          example: "Main distributor for Italian and Swiss markets"
        custom_data:
          type: object
          description: Custom organization data
          additionalProperties: true
          example:
            email: "contact@acme-distribution.com"
            contactPerson: "John Smith"
            region: "Italy"
        branding:
          $ref: '#/components/schemas/OrganizationBranding'

    OrganizationInput:
      type: object
      required:
        - name
        - custom_data
      properties:
        name:
          type: string
          minLength: 1
          description: Organization name (cannot be empty)
          example: "ACME Distribution SpA"
        description:
          type: string
          description: Organization description
          example: "Main distributor for Italian and Swiss markets"
        custom_data:
          type: object
          description: Custom organization data (vat field is required)
          required:
            - vat
          properties:
            vat:
              type: string
              minLength: 1
              description: VAT number (required, cannot be empty)
              example: "IT12345678901"
          additionalProperties: true
          example:
            vat: "IT12345678901"
            email: "contact@acme-distribution.com"
            contactPerson: "John Smith"
            region: "Italy"

    User:
      type: object
      properties:
        id:
          type: string
          description: User account ID
          example: "usr_123456789"
        logto_id:
          type: string
          nullable: true
          description: Logto user ID
          example: "user_abc123def456"
        username:
          type: string
          description: Username
          example: "john.doe"
        email:
          type: string
          format: email
          description: Email address
          example: "john@example.com"
        name:
          type: string
          description: Full name
          example: "John Doe"
        phone:
          type: string
          nullable: true
          description: Phone number
          example: "+39 333 123456"
        organization:
          $ref: '#/components/schemas/UserOrganization'
          nullable: true
          description: Organization information
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
          description: User roles with names
          example: [{"id": "rol_admin_123", "name": "Admin"}]
        custom_data:
          type: object
          description: Custom user data
          additionalProperties: true
          example:
            department: "IT"
            position: "Senior Developer"
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2025-06-20T14:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-06-21T10:45:00Z"
        logto_synced_at:
          type: string
          format: date-time
          nullable: true
          description: Last Logto synchronization timestamp
          example: "2025-06-21T10:45:00Z"
        latest_login_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp of the last successful login via /auth/exchange endpoint. NULL means user has never logged in.
          example: "2025-06-21T15:30:45Z"
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: Soft delete timestamp (null if not deleted)
          example: null
        suspended_at:
          type: string
          format: date-time
          nullable: true
          description: Suspension timestamp (null if not suspended)
          example: null
        can_be_impersonated:
          type: boolean
          description: Whether this user can currently be impersonated (only shown for Owner users, based on active consent)
          example: true

    UserInput:
      type: object
      description: |
        User creation request. Password is automatically generated by the server and sent via email.
      required:
        - email
        - name
        - user_role_ids
        - organization_id
      properties:
        email:
          type: string
          format: email
          description: Email address (username will be generated automatically)
          example: "john.doe@acme.com"
        name:
          type: string
          description: Full name
          example: "John Doe"
        user_role_ids:
          type: array
          items:
            type: string
          description: User role IDs to assign
          example: ["rol_abc123def456", "rol_xyz789abc123"]
        organization_id:
          type: string
          description: Organization ID to assign user to
          example: "org_xyz789"
        phone:
          type: string
          description: Phone number
          example: "+39 333 123456"
        custom_data:
          type: object
          description: Custom user data
          additionalProperties: true
          example:
            department: "IT"
            position: "Senior Developer"

    UserUpdate:
      type: object
      properties:
        name:
          type: string
          description: Full name
          example: "John Doe (Updated)"
        user_role_ids:
          type: array
          items:
            type: string
          description: User role IDs to assign
          example: ["rol_new_role_id_here", "rol_another_id"]
        phone:
          type: string
          description: Phone number
          example: "+39 333 123456"
        custom_data:
          type: object
          description: Custom user data
          additionalProperties: true
          example:
            department: "Sales"
            location: "Rome"

    PasswordResetRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          minLength: 12
          maxLength: 128
          description: |
            Password meeting security requirements:
            - At least 12 characters long
            - At least one uppercase letter (A-Z)
            - At least one lowercase letter (a-z)
            - At least one digit (0-9)
            - At least one special character (!@#$%^&*...)
            - No more than 3 consecutive identical characters
            - Cannot contain common weak patterns
          example: "MySecureP4ssw9rd!"


    Role:
      type: object
      properties:
        id:
          type: string
          description: Role ID
          example: "rol_admin_123"
        name:
          type: string
          description: Role name
          example: "Admin"
        description:
          type: string
          description: Role description
          example: "Full system administration capabilities"

    UserRole:
      type: object
      properties:
        id:
          type: string
          description: Role ID
          example: "rol_admin_123"
        name:
          type: string
          description: Role name
          example: "Admin"

    UserOrganization:
      type: object
      properties:
        id:
          type: string
          description: Local database organization ID
          example: "12345678-1234-1234-1234-123456789abc"
        logto_id:
          type: string
          description: Logto organization ID
          example: "org_123456789"
        name:
          type: string
          description: Organization name
          example: "ACME Corp"

    OrganizationRole:
      type: object
      properties:
        id:
          type: string
          description: Organization role ID
          example: "org_rol_owner_123"
        name:
          type: string
          description: Organization role name
          example: "Owner"
        description:
          type: string
          description: Organization role description
          example: "Complete control over organization and business hierarchy"

    OrganizationReference:
      type: object
      properties:
        id:
          type: string
          description: Organization ID
          example: "org_123456789"
        name:
          type: string
          description: Organization name
          example: "ACME Corp"
        description:
          type: string
          description: Organization description
          example: "Main customer organization"
        type:
          type: string
          enum: [owner, distributor, reseller, customer]
          description: Organization type
          example: "customer"
        branding:
          $ref: '#/components/schemas/OrganizationBranding'

    OrganizationBranding:
      type: object
      properties:
        logo_url:
          type: string
          description: Organization logo URL
          example: "https://cdn.example.com/logos/org-console.png"
        dark_logo_url:
          type: string
          description: Organization dark theme logo URL
          example: "https://cdn.example.com/logos/org-console-dark.png"

    ThirdPartyApplication:
      type: object
      properties:
        id:
          type: string
          description: Application ID
          example: "app_123456789"
        name:
          type: string
          description: Application name (FQDN)
          example: "management.company.com"
        description:
          type: string
          description: Application description
          example: "Management interface for system administrators"
        redirect_uris:
          type: array
          items:
            type: string
          description: OAuth redirect URIs
          example: ["https://management.company.com/callback"]
        post_logout_redirect_uris:
          type: array
          items:
            type: string
          description: Post logout redirect URIs
          example: ["https://management.company.com"]
        login_url:
          type: string
          description: OAuth2 login URL with dynamic scopes and parameters
          example: "https://tree6d.logto.app/oidc/auth?client_id=app_123456789&redirect_uri=https%3A%2F%2Fmanagement.company.com%2Fcallback&response_type=code&scope=openid+profile+email+roles&state=random-state-string"
        branding:
          $ref: '#/components/schemas/ApplicationBranding'

    ApplicationBranding:
      type: object
      properties:
        display_name:
          type: string
          description: Application display name
          example: "Management Console"
        logo_url:
          type: string
          description: Application logo URL
          example: "https://cdn.example.com/logos/management-console.png"
        dark_logo_url:
          type: string
          description: Application dark theme logo URL
          example: "https://cdn.example.com/logos/management-console-dark.png"


    SystemTotals:
      type: object
      properties:
        total_systems:
          type: integer
          description: Total number of systems
          example: 1250
        alive_systems:
          type: integer
          description: Number of systems that communicated within the last timeout minutes
          example: 1100
        dead_systems:
          type: integer
          description: Number of systems that communicated but not within timeout minutes
          example: 100
        zombie_systems:
          type: integer
          description: Number of systems that were created but never communicated
          example: 50
        timeout_minutes:
          type: integer
          description: Timeout used for alive/dead determination
          example: 15

    Totals:
      type: object
      properties:
        total:
          type: integer
          description: Total count
          example: 125

    System:
      type: object
      properties:
        id:
          type: string
          description: System ID
          example: "4cf3053f-d0d5-4b10-b752-ff8f7b63c2f7"
        name:
          type: string
          description: System name
          example: "Production Server 01"
        type:
          type: string
          description: System type
          example: "ns8"
        status:
          type: string
          enum: [online, offline, maintenance]
          description: System operational status
          example: "online"
        fqdn:
          type: string
          description: Fully qualified domain name
          example: "prod-web-01.example.com"
        ipv4_address:
          type: string
          description: IPv4 address
          example: "192.168.1.100"
        ipv6_address:
          type: string
          description: IPv6 address
          example: "2001:db8::1"
        version:
          type: string
          description: System version
          example: "2.1.4"
        last_seen:
          type: string
          format: date-time
          description: Last seen timestamp from inventory
          example: "2025-07-10T10:30:00Z"
        custom_data:
          type: object
          description: Custom system data
          additionalProperties: true
          example:
            datacenter: "EU-West-1"
            environment: "production"
            tier: "web"
        secret_hint:
          type: string
          description: Last 4 characters of system secret for identification
          example: "a7b9"
        created_at:
          type: string
          format: date-time
          description: System creation timestamp
          example: "2025-07-01T09:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: System last update timestamp
          example: "2025-07-10T10:30:00Z"
        created_by:
          $ref: '#/components/schemas/SystemCreator'
        # Heartbeat status fields
        heartbeat_status:
          type: string
          enum: [alive, dead, zombie]
          description: System heartbeat status (alive=<15min, dead=>15min, zombie=never communicated)
          example: "alive"
        last_heartbeat:
          type: string
          format: date-time
          description: Last heartbeat timestamp
          example: "2025-07-21T10:25:00Z"
        heartbeat_minutes:
          type: integer
          description: Minutes since last heartbeat
          example: 5

    SystemCreator:
      type: object
      properties:
        user_id:
          type: string
          description: User ID who created the system
          example: "usr_123456789"
        user_name:
          type: string
          description: Username who created the system
          example: "admin"
        organization_id:
          type: string
          description: Organization ID of the creator
          example: "org_123456789"
        organization_name:
          type: string
          description: Organization name of the creator
          example: "Nethesis"

    SystemInput:
      type: object
      description: System creation/update request. The system will be associated with the creator's organization automatically.
      required:
        - name
        - type
      properties:
        name:
          type: string
          description: System name
          example: "Production Server 01"
        type:
          type: string
          description: System type
          example: "ns8"
        custom_data:
          type: object
          description: Custom system data
          additionalProperties:
            type: string
          example:
            datacenter: "EU-West-1"
            environment: "production"
            tier: "web"

    ImpersonationConsent:
      type: object
      properties:
        id:
          type: string
          description: Consent ID
          example: "consent_123"
        user_id:
          type: string
          description: User ID who grants consent
          example: "usr_456"
        expires_at:
          type: string
          format: date-time
          description: Consent expiration timestamp
          example: "2025-09-04T14:30:00Z"
        max_duration_minutes:
          type: integer
          description: Maximum duration for each impersonation session in minutes
          example: 60
        created_at:
          type: string
          format: date-time
          description: Consent creation timestamp
          example: "2025-09-03T14:30:00Z"

    ImpersonationSession:
      type: object
      properties:
        session_id:
          type: string
          description: Unique session identifier
          example: "sess_abc123def456"
        impersonator_user_id:
          type: string
          description: User ID of the person doing the impersonation
          example: "usr_owner_123"
        impersonated_user_id:
          type: string
          description: User ID of the person being impersonated
          example: "usr_target_456"
        impersonator_username:
          type: string
          description: Username of the impersonator
          example: "owner@company.com"
        impersonated_username:
          type: string
          description: Username of the impersonated user
          example: "customer@example.com"
        start_time:
          type: string
          format: date-time
          description: Session start timestamp
          example: "2025-09-02T14:30:00Z"
        end_time:
          type: string
          format: date-time
          nullable: true
          description: Session end timestamp (null if still active)
          example: "2025-09-02T15:45:00Z"
        duration_minutes:
          type: integer
          nullable: true
          description: Session duration in minutes (null if still active)
          example: 75
        action_count:
          type: integer
          description: Number of actions performed in this session
          example: 24
        status:
          type: string
          enum: [active, completed]
          description: Session status
          example: "completed"

    ImpersonationAuditEntry:
      type: object
      properties:
        id:
          type: string
          description: Audit entry ID
          example: "audit_xyz789abc"
        session_id:
          type: string
          description: Impersonation session ID
          example: "sess_abc123def456"
        impersonator_user_id:
          type: string
          description: User ID of the person doing the impersonation
          example: "usr_owner_123"
        impersonated_user_id:
          type: string
          description: User ID of the person being impersonated
          example: "usr_target_456"
        impersonator_username:
          type: string
          description: Username of the impersonator
          example: "owner@company.com"
        impersonated_username:
          type: string
          description: Username of the impersonated user
          example: "customer@example.com"
        action_type:
          type: string
          enum: [session_start, session_end, api_call]
          description: Type of action performed
          example: "api_call"
        api_endpoint:
          type: string
          nullable: true
          description: API endpoint called (only for api_call actions)
          example: "/api/users"
        http_method:
          type: string
          nullable: true
          description: HTTP method used (only for api_call actions)
          example: "GET"
        request_data:
          type: string
          nullable: true
          description: Request data (only for api_call actions)
          example: "{\"limit\": 10}"
        response_status:
          type: integer
          nullable: true
          description: HTTP response status (only for api_call actions)
          example: 200
        timestamp:
          type: string
          format: date-time
          description: When this action occurred
          example: "2025-09-02T14:32:15Z"

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
        example: 1

    PageSizeParam:
      name: page_size
      in: query
      description: Items per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
        example: 20

    DistributorSortByParam:
      name: sort_by
      in: query
      description: Field to sort distributors by
      required: false
      schema:
        type: string
        enum: ["name", "description", "created_at", "updated_at"]
        example: "name"

    ResellerSortByParam:
      name: sort_by
      in: query
      description: Field to sort resellers by
      required: false
      schema:
        type: string
        enum: ["name", "description", "created_at", "updated_at"]
        example: "name"

    CustomerSortByParam:
      name: sort_by
      in: query
      description: Field to sort customers by
      required: false
      schema:
        type: string
        enum: ["name", "description", "created_at", "updated_at"]
        example: "name"

    UserSortByParam:
      name: sort_by
      in: query
      description: Field to sort users by
      required: false
      schema:
        type: string
        enum: ["name", "email", "username", "created_at", "updated_at", "latest_login_at", "organization"]
        example: "name"

    SystemSortByParam:
      name: sort_by
      in: query
      description: Field to sort systems by
      required: false
      schema:
        type: string
        enum: ["name", "type", "status", "fqdn", "version", "created_at", "updated_at", "last_seen", "creator_name"]
        example: "name"

    SortDirectionParam:
      name: sort_direction
      in: query
      description: Sort direction
      required: false
      schema:
        type: string
        enum: ["asc", "desc"]
        default: "asc"
        example: "asc"

    SearchParam:
      name: search
      in: query
      description: Search term
      required: false
      schema:
        type: string
        minLength: 1
        example: "acme"

  responses:
    BadRequest:
      description: Bad request - validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized - invalid or missing token
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 401
              message:
                type: string
                example: "invalid token"
              data:
                type: object
                nullable: true
                example: null

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 403
              message:
                type: string
                example: "insufficient permissions"
              data:
                type: object
                nullable: true
                example: null

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    UnprocessableEntity:
      description: Unprocessable entity - business logic error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 500
              message:
                type: string
                example: "internal server error"
              data:
                type: object
                nullable: true
                example: null

paths:
  /users:
    get:
      operationId: getUsers
      tags:
        - Backend - Users
      summary: /users - List users
      description: Get paginated list of users with hierarchical authorization
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SearchParam'
        - $ref: '#/components/parameters/UserSortByParam'
        - $ref: '#/components/parameters/SortDirectionParam'
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "users retrieved successfully"
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      operationId: createUser
      tags:
        - Backend - Users
      summary: /users - Create user
      description: Create a new user with hierarchical authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "user created successfully"
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /users/{id}:
    get:
      operationId: getUserById
      tags:
        - Backend - Users
      summary: /users/{id} - Get single user
      description: Get a specific user by ID with hierarchical authorization
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: "usr_123456789"
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "user retrieved successfully"
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      operationId: updateUser
      tags:
        - Backend - Users
      summary: /users/{id} - Update user
      description: Update a user with hierarchical authorization
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: "usr_123456789"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "user updated successfully"
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

    delete:
      operationId: deleteUser
      tags:
        - Backend - Users
      summary: /users/{id} - Delete user
      description: Delete a user with hierarchical authorization
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: "usr_123456789"
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "user deleted successfully"
                  data:
                    type: object
                    nullable: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{id}/password:
    patch:
      operationId: resetUserPassword
      tags:
        - Backend - Users
      summary: /users/{id}/password - Reset user password
      description: Reset a user's password (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: "usr_123456789"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "password reset successfully"
                  data:
                    type: object
                    nullable: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{id}/suspend:
    patch:
      operationId: suspendUser
      tags:
        - Backend - Users
      summary: /users/{id}/suspend - Suspend user
      description: Suspend a user (requires manage:users permission and hierarchical validation)
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: "usr_123456789"
      responses:
        '200':
          description: User suspended successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "user suspended successfully"
                  data:
                    type: object
                    nullable: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{id}/reactivate:
    patch:
      operationId: reactivateUser
      tags:
        - Backend - Users
      summary: /users/{id}/reactivate - Reactivate suspended user
      description: Reactivate a suspended user (requires manage:users permission and hierarchical validation)
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: "usr_123456789"
      responses:
        '200':
          description: User reactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "user reactivated successfully"
                  data:
                    type: object
                    nullable: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/totals:
    get:
      operationId: getUsersTotals
      tags:
        - Backend - Users
      summary: /users/totals - Get users totals
      description: Get total count of users accessible to the user (Admin role required)
      responses:
        '200':
          description: Users totals retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "users totals retrieved"
                  data:
                    $ref: '#/components/schemas/Totals'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /applications:
    get:
      operationId: getApplications
      tags:
        - Backend - Applications
      summary: /applications - Get third-party applications
      description: Get third-party applications filtered by user's organization membership, organization roles, and user roles
      responses:
        '200':
          description: Applications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Applications retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ThirdPartyApplication'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Failed to fetch applications from Logto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/exchange:
    post:
      operationId: exchangeToken
      tags:
        - Backend - Authentication
      summary: /auth/exchange - Exchange Logto token for custom JWT
      description: Exchange a Logto access token for a custom JWT with embedded permissions
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenExchangeRequest'
      responses:
        '200':
          description: Token exchange successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "token exchange successful"
                  data:
                    $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /me:
    get:
      operationId: getMe
      tags:
        - Backend - Me
      summary: /me - Get current user information
      description: Get current authenticated user's profile and permissions
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "user information retrieved successfully"
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /me/change-password:
    post:
      operationId: changeMyPassword
      tags:
        - Backend - Me
      summary: /me/change-password - Change current user password
      description: Allow the current authenticated user to change their own password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "password changed successfully"
                  data:
                    type: object
                    nullable: true
                    example: null
        '400':
          description: Bad request - validation error for current password verification or new password requirements
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: "validation failed"
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        enum: [validation_error]
                        example: "validation_error"
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            key:
                              type: string
                              description: Field name that failed validation
                              enum: [current_password, new_password]
                              example: "new_password"
                            message:
                              type: string
                              description: Validation error type
                              example: "min_length"
                            value:
                              type: string
                              description: Always empty for security (passwords not exposed)
                              example: ""
                        example:
                          - key: "current_password"
                            message: "incorrect_password"
                            value: ""
                          - key: "new_password"
                            message: "min_length"
                            value: ""
                          - key: "new_password"
                            message: "missing_uppercase"
                            value: ""
        '401':
          description: Unauthorized - invalid or missing JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: "invalid token"
                  data:
                    type: object
                    nullable: true
                    example: null
        '500':
          $ref: '#/components/responses/InternalServerError'

  /me/change-info:
    post:
      operationId: changeMyInfo
      tags:
        - Backend - Me
      summary: /me/change-info - Change current user information
      description: Allow the current authenticated user to change their name, email, and phone number. Name and email cannot be empty if provided.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeInfoRequest'
      responses:
        '200':
          description: User information changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "user information changed successfully"
                  data:
                    type: object
                    nullable: true
                    example: null
        '400':
          description: Bad request - validation error for name or phone
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: "validation failed"
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        enum: [validation_error]
                        example: "validation_error"
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            key:
                              type: string
                              description: Field name that failed validation
                              enum: [name, email, phone]
                              example: "name"
                            message:
                              type: string
                              description: Validation error message
                              enum: ["name cannot be empty", "email cannot be empty", "invalid email format", "invalid phone format"]
                              example: "name cannot be empty"
                            value:
                              type: string
                              description: Value that failed validation
                              example: ""
                        example:
                          - key: "name"
                            message: "name cannot be empty"
                            value: ""
        '401':
          description: Unauthorized - invalid or missing JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: "invalid token"
                  data:
                    type: object
                    nullable: true
                    example: null
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/refresh:
    post:
      operationId: refreshToken
      tags:
        - Backend - Authentication
      summary: /auth/refresh - Refresh access token
      description: Get new access token using refresh token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
      responses:
        '200':
          description: Token refresh successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "token refresh successful"
                  data:
                    $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      operationId: logout
      tags:
        - Backend - Authentication
      summary: /auth/logout - Logout user
      description: Invalidate user's access token and refresh token (blacklist tokens)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  description: Refresh token to blacklist
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              required:
                - refresh_token
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "logout successful"
                  data:
                    type: object
                    nullable: true
                    example: null
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ===========================================================================
  # CONSENT-BASED IMPERSONATION SYSTEM
  # ===========================================================================

  /impersonate/consent:
    post:
      operationId: enableImpersonationConsent
      tags:
        - Backend - Impersonation
      summary: /impersonate/consent - Enable impersonation consent
      description: |
        Allows a user to enable consent for being impersonated by Owner users.
        This is a **privacy-friendly** approach where users explicitly control
        if and for how long they can be impersonated.

        **Key Features:**
        - User controls their own impersonation consent
        - Custom duration (1-168 hours)
        - Only active while consent is valid
        - Complete audit trail of all impersonation activities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                duration_hours:
                  type: integer
                  minimum: 1
                  maximum: 168
                  description: How many hours the consent should be active (max 1 week)
                  example: 24
              required:
                - duration_hours
      responses:
        '200':
          description: Impersonation consent enabled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "impersonation consent enabled successfully"
                  data:
                    type: object
                    properties:
                      consent:
                        $ref: '#/components/schemas/ImpersonationConsent'
        '400':
          description: Bad request (invalid duration)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: "Duration must be between 1 and 168 hours"
        '401':
          $ref: '#/components/responses/Unauthorized'

    get:
      operationId: getImpersonationConsentStatus
      tags:
        - Backend - Impersonation
      summary: /impersonate/consent - Get impersonation consent status
      description: |
        Retrieves the current impersonation consent status for the authenticated user.
        Shows if consent is active, when it expires, and other consent details.
      responses:
        '200':
          description: Consent status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "consent status retrieved successfully"
                  data:
                    type: object
                    properties:
                      consent:
                        allOf:
                          - $ref: '#/components/schemas/ImpersonationConsent'
                        type: object
                        nullable: true
                        description: Consent details (null if no active consent)
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      operationId: disableImpersonationConsent
      tags:
        - Backend - Impersonation
      summary: /impersonate/consent - Disable impersonation consent
      description: |
        Disables all active impersonation consent for the authenticated user.
        This prevents any future impersonation until consent is re-enabled.
      responses:
        '200':
          description: Impersonation consent disabled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "impersonation consent disabled successfully"
                  data:
                    type: object
                    nullable: true
        '401':
          $ref: '#/components/responses/Unauthorized'

  /impersonate:
    post:
      operationId: impersonateUserWithConsent
      tags:
        - Backend - Impersonation
      summary: /impersonate - Start impersonation (Owner only)
      description: |
        Allows an Owner user to impersonate another user, but only if that user
        has active consent enabled. The impersonation token duration will match
        the user's consent settings.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: ID of the user to impersonate
                  example: "user-uuid-here"
              required:
                - user_id
      responses:
        '200':
          description: Impersonation started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "impersonation started successfully"
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        description: Impersonation JWT token with custom duration
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      expires_in:
                        type: integer
                        description: Token expiration time in seconds (matches user consent)
                        example: 86400
                      session_id:
                        type: string
                        description: Unique session ID for audit tracking
                        example: "session-uuid-here"
                      impersonated_user:
                        $ref: '#/components/schemas/User'
                      impersonator:
                        $ref: '#/components/schemas/User'
                      is_impersonated:
                        type: boolean
                        description: Flag indicating this is an impersonation token
                        example: true
        '400':
          description: Bad request (cannot impersonate yourself, user not found, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                self_impersonation:
                  summary: Cannot impersonate yourself
                  value:
                    code: 400
                    message: "Cannot impersonate yourself"
                user_not_found:
                  summary: Target user not found
                  value:
                    code: 400
                    message: "Target user not found or inaccessible"
                no_consent:
                  summary: User has no active consent
                  value:
                    code: 400
                    message: "Target user has not provided consent for impersonation or consent has expired"
        '403':
          description: Forbidden (only Owner users can impersonate, or already impersonating)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                not_owner:
                  summary: Non-owner user attempted impersonation
                  value:
                    code: 403
                    message: "Only owner users can impersonate other users"
                already_impersonating:
                  summary: Cannot impersonate while already impersonating
                  value:
                    code: 403
                    message: "Cannot impersonate while already impersonating another user. Exit current impersonation first."
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      operationId: exitImpersonationWithAudit
      tags:
        - Backend - Impersonation
      summary: /impersonate - Exit impersonation mode
      description: |
        Allows user to exit impersonation mode and return to their original account.
        This endpoint can only be called with an active impersonation token.
        Returns fresh tokens for the original user and completes the audit session.
      responses:
        '200':
          description: Impersonation ended successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "impersonation ended successfully"
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        description: New JWT token for original user (24-hour expiration)
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refresh_token:
                        type: string
                        description: New refresh token for original user
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      expires_in:
                        type: integer
                        description: Token expiration time in seconds (86400 = 24 hours)
                        example: 86400
        '400':
          description: Bad request (not currently impersonating)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: "Not currently impersonating a user"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /impersonate/sessions:
    get:
      operationId: getImpersonationSessions
      tags:
        - Backend - Impersonation
      summary: /impersonate/sessions - List impersonation sessions
      description: |
        Retrieves all impersonation sessions for the current user. Sessions are grouped
        by session_id and show start/end times, duration, and action count. This endpoint
        should be used first to get session overview, then use /impersonate/audit/{session_id}
        to get detailed audit logs for specific sessions.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "sessions retrieved successfully"
                  data:
                    type: object
                    properties:
                      sessions:
                        type: array
                        items:
                          $ref: '#/components/schemas/ImpersonationSession'
                      total:
                        type: integer
                        description: Total number of sessions
                        example: 25
                      page:
                        type: integer
                        description: Current page number
                        example: 1
                      page_size:
                        type: integer
                        description: Number of sessions per page
                        example: 20
                      has_more:
                        type: boolean
                        description: Whether there are more sessions available
                        example: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /impersonate/sessions/{session_id}:
    get:
      operationId: getImpersonationSession
      tags:
        - Backend - Impersonation
      summary: /impersonate/sessions/{session_id} - Get details for specific session
      description: |
        Retrieves details for a specific impersonation session. Users can only
        view sessions where they were impersonated. The session must belong to
        the requesting user.
      parameters:
        - name: session_id
          in: path
          description: Impersonation session ID
          required: true
          schema:
            type: string
          example: "sess_abc123def456"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Session details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "session details retrieved successfully"
                  data:
                    type: object
                    properties:
                      session:
                        $ref: '#/components/schemas/ImpersonationSession'
        '400':
          description: Missing or invalid session_id parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: "session_id parameter is required"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: "session not found"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /impersonate/sessions/{session_id}/audit:
    get:
      operationId: getSessionAudit
      tags:
        - Backend - Impersonation
      summary: /impersonate/sessions/{session_id}/audit - Get audit logs for specific session
      description: |
        Retrieves detailed audit logs for a specific impersonation session. Users can only
        view audit logs for their own sessions (when they were impersonated). The session
        must belong to the requesting user.
      parameters:
        - name: session_id
          in: path
          description: Impersonation session ID
          required: true
          schema:
            type: string
          example: "sess_abc123def456"
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Session audit logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "session audit retrieved successfully"
                  data:
                    type: object
                    properties:
                      session_id:
                        type: string
                        description: Session ID
                        example: "sess_abc123def456"
                      entries:
                        type: array
                        items:
                          $ref: '#/components/schemas/ImpersonationAuditEntry'
                      total:
                        type: integer
                        description: Total number of entries in this session
                        example: 15
        '400':
          description: Missing or invalid session_id parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: "session_id parameter is required"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Session not found or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: "session not found or access denied"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /customers:
    get:
      operationId: getCustomers
      tags:
        - Backend - Customers
      summary: /customers - List customers
      description: Get paginated list of customers (Owner + Distributor + Reseller)
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SearchParam'
        - $ref: '#/components/parameters/CustomerSortByParam'
        - $ref: '#/components/parameters/SortDirectionParam'
      responses:
        '200':
          description: Customers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "customers retrieved successfully"
                  data:
                    type: object
                    properties:
                      customers:
                        type: array
                        items:
                          $ref: '#/components/schemas/Organization'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      operationId: createCustomer
      tags:
        - Backend - Customers
      summary: /customers - Create customer
      description: Create a new customer organization (Owner + Distributor + Reseller)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "customer created successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /customers/{id}:
    get:
      operationId: getCustomerById
      tags:
        - Backend - Customers
      summary: /customers/{id} - Get single customer
      description: Get a specific customer by ID (Owner + Distributor + Reseller)
      parameters:
        - name: id
          in: path
          required: true
          description: Customer organization ID
          schema:
            type: string
            example: "org_456789123"
      responses:
        '200':
          description: Customer retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "customer retrieved successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      operationId: updateCustomer
      tags:
        - Backend - Customers
      summary: /customers/{id} - Update customer
      description: Update a customer organization (Owner + Distributor + Reseller)
      parameters:
        - name: id
          in: path
          required: true
          description: Customer organization ID
          schema:
            type: string
            example: "org_456789123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "customer updated successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

    delete:
      operationId: deleteCustomer
      tags:
        - Backend - Customers
      summary: /customers/{id} - Delete customer
      description: Delete a customer organization (Owner + Distributor + Reseller)
      parameters:
        - name: id
          in: path
          required: true
          description: Customer organization ID
          schema:
            type: string
            example: "org_456789123"
      responses:
        '200':
          description: Customer deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "customer deleted successfully"
                  data:
                    type: object
                    nullable: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /customers/totals:
    get:
      operationId: getCustomersTotals
      tags:
        - Backend - Customers
      summary: /customers/totals - Get customers totals
      description: Get total count of customers accessible to the user (Owner + Distributor + Reseller)
      responses:
        '200':
          description: Customers totals retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "customers totals retrieved"
                  data:
                    $ref: '#/components/schemas/Totals'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /distributors:
    get:
      operationId: getDistributors
      tags:
        - Backend - Distributors
      summary: /distributors - List distributors
      description: Get paginated list of distributors (Owner only)
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SearchParam'
        - $ref: '#/components/parameters/DistributorSortByParam'
        - $ref: '#/components/parameters/SortDirectionParam'
      responses:
        '200':
          description: Distributors retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "distributors retrieved successfully"
                  data:
                    type: object
                    properties:
                      distributors:
                        type: array
                        items:
                          $ref: '#/components/schemas/Organization'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      operationId: createDistributor
      tags:
        - Backend - Distributors
      summary: /distributors - Create distributor
      description: Create a new distributor organization (Owner only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
      responses:
        '201':
          description: Distributor created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "distributor created successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /distributors/{id}:
    get:
      operationId: getDistributorById
      tags:
        - Backend - Distributors
      summary: /distributors/{id} - Get single distributor
      description: Get a specific distributor by ID (Owner only)
      parameters:
        - name: id
          in: path
          required: true
          description: Distributor organization ID
          schema:
            type: string
            example: "org_123456789"
      responses:
        '200':
          description: Distributor retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "distributor retrieved successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      operationId: updateDistributor
      tags:
        - Backend - Distributors
      summary: /distributors/{id} - Update distributor
      description: Update a distributor organization (Owner only)
      parameters:
        - name: id
          in: path
          required: true
          description: Distributor organization ID
          schema:
            type: string
            example: "org_123456789"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
      responses:
        '200':
          description: Distributor updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "distributor updated successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

    delete:
      operationId: deleteDistributor
      tags:
        - Backend - Distributors
      summary: /distributors/{id} - Delete distributor
      description: Delete a distributor organization (Owner only)
      parameters:
        - name: id
          in: path
          required: true
          description: Distributor organization ID
          schema:
            type: string
            example: "org_123456789"
      responses:
        '200':
          description: Distributor deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "distributor deleted successfully"
                  data:
                    type: object
                    nullable: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /distributors/totals:
    get:
      operationId: getDistributorsTotals
      tags:
        - Backend - Distributors
      summary: /distributors/totals - Get distributors totals
      description: Get total count of distributors accessible to the user (Owner only)
      responses:
        '200':
          description: Distributors totals retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "distributors totals retrieved"
                  data:
                    $ref: '#/components/schemas/Totals'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /health:
    get:
      operationId: getHealth
      tags:
        - Backend - Health
        - Collect - Health
      summary: /health - Health check
      description: Check if the service is healthy (available on both backend and collect servers)
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "service healthy"
                  data:
                    type: object
                    description: Health data (collect includes worker metrics)
                    nullable: true
        '404':
          description: Endpoint not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "endpoint not found"
                  data:
                    type: object
                    nullable: true
                    example: null
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          description: Service is unhealthy (collect service only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organization-roles:
    get:
      operationId: getOrganizationRoles
      tags:
        - Backend - Roles
      summary: /organization-roles - Get all organization roles
      description: Get all available organization roles with their IDs and descriptions
      responses:
        '200':
          description: Organization roles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "organization roles retrieved successfully"
                  data:
                    type: object
                    properties:
                      organizationRoles:
                        type: array
                        items:
                          $ref: '#/components/schemas/OrganizationRole'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /organizations:
    get:
      operationId: getOrganizations
      tags:
        - Backend - Organizations
      summary: /organizations - Get available organizations
      description: Get organizations the current user can assign users to, filtered by business hierarchy
      responses:
        '200':
          description: Organizations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "organizations retrieved successfully"
                  data:
                    type: object
                    properties:
                      organizations:
                        type: array
                        items:
                          $ref: '#/components/schemas/OrganizationReference'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /resellers:
    get:
      operationId: getResellers
      tags:
        - Backend - Resellers
      summary: /resellers - List resellers
      description: Get paginated list of resellers (Owner + Distributor)
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SearchParam'
        - $ref: '#/components/parameters/ResellerSortByParam'
        - $ref: '#/components/parameters/SortDirectionParam'
      responses:
        '200':
          description: Resellers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "resellers retrieved successfully"
                  data:
                    type: object
                    properties:
                      resellers:
                        type: array
                        items:
                          $ref: '#/components/schemas/Organization'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      operationId: createReseller
      tags:
        - Backend - Resellers
      summary: /resellers - Create reseller
      description: Create a new reseller organization (Owner + Distributor)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
      responses:
        '201':
          description: Reseller created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "reseller created successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /resellers/{id}:
    get:
      operationId: getResellerById
      tags:
        - Backend - Resellers
      summary: /resellers/{id} - Get single reseller
      description: Get a specific reseller by ID (Owner + Distributor)
      parameters:
        - name: id
          in: path
          required: true
          description: Reseller organization ID
          schema:
            type: string
            example: "org_987654321"
      responses:
        '200':
          description: Reseller retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "reseller retrieved successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      operationId: updateReseller
      tags:
        - Backend - Resellers
      summary: /resellers/{id} - Update reseller
      description: Update a reseller organization (Owner + Distributor)
      parameters:
        - name: id
          in: path
          required: true
          description: Reseller organization ID
          schema:
            type: string
            example: "org_987654321"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
      responses:
        '200':
          description: Reseller updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "reseller updated successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

    delete:
      operationId: deleteReseller
      tags:
        - Backend - Resellers
      summary: /resellers/{id} - Delete reseller
      description: Delete a reseller organization (Owner + Distributor)
      parameters:
        - name: id
          in: path
          required: true
          description: Reseller organization ID
          schema:
            type: string
            example: "org_987654321"
      responses:
        '200':
          description: Reseller deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "reseller deleted successfully"
                  data:
                    type: object
                    nullable: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /resellers/totals:
    get:
      operationId: getResellersTotals
      tags:
        - Backend - Resellers
      summary: /resellers/totals - Get resellers totals
      description: Get total count of resellers accessible to the user (Owner + Distributor)
      responses:
        '200':
          description: Resellers totals retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "resellers totals retrieved"
                  data:
                    $ref: '#/components/schemas/Totals'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /roles:
    get:
      operationId: getRoles
      tags:
        - Backend - Roles
      summary: /roles - Get all user roles
      description: Get all available user roles with their IDs and descriptions
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "roles retrieved successfully"
                  data:
                    type: object
                    properties:
                      roles:
                        type: array
                        items:
                          $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/Unauthorized'


  /systems:
    get:
      operationId: getSystems
      tags:
        - Backend - Systems
      summary: /systems - List systems
      description: Get list of systems visible to the user based on hierarchical organization permissions.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SearchParam'
        - $ref: '#/components/parameters/SystemSortByParam'
        - $ref: '#/components/parameters/SortDirectionParam'
      responses:
        '200':
          description: Systems retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "systems retrieved successfully"
                  data:
                    type: object
                    properties:
                      systems:
                        type: array
                        items:
                          $ref: '#/components/schemas/System'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      operationId: createSystem
      tags:
        - Backend - Systems
      summary: /systems - Create system
      description: Create a new system. Any authenticated user can create systems - access control is based on the creator's organization.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemInput'
      responses:
        '201':
          description: System created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "system created successfully"
                  data:
                    $ref: '#/components/schemas/System'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /systems/callback:
    post:
      operationId: createSystemWithCallback
      tags:
        - Backend - Systems
      summary: Create system with OAuth-style callback
      description: |
        Create a new system and execute an OAuth-style callback to an external URL.
        This endpoint is designed for external applications that want to integrate system creation
        into their workflow. The callback includes system information as query parameters.

        **Security Features:**
        - Time-based state tokens: State tokens expire after 1 hour
        - One-shot protection: Each state token can only be used once (24-hour blacklist)
        - CSRF protection: State validation prevents cross-site request forgery

        **Callback Flow:**
        1. External page generates time-based state token with timestamp
        2. External page redirects user to My Nethesis frontend with parameters
        3. User authenticates via Logto if needed
        4. Frontend calls this endpoint with system details and callback info
        5. Backend creates system and executes GET callback to external URL
        6. External page receives callback with system data in query parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
                - callback_url
                - callback_state
              properties:
                name:
                  type: string
                  description: System name
                  example: "Production Server"
                type:
                  type: string
                  description: System type
                  enum: [ns8, nsec]
                  example: "ns8"
                callback_url:
                  type: string
                  format: uri
                  description: External URL to callback with system creation results
                  example: "https://external-app.com/callback"
                callback_state:
                  type: string
                  description: |
                    Time-based state token for CSRF protection and replay prevention.
                    Format: state_{base64-encoded-json}
                    JSON contains: {timestamp: number, random: string}
                  example: "state_eyJ0aW1lc3RhbXAiOjE3MjU1MjUxMjM0NTYsInJhbmRvbSI6ImFiYzEyM2RlZjQ1NiJ9"
                custom_data:
                  type: object
                  description: Optional custom metadata for the system
                  additionalProperties:
                    type: string
                  example:
                    created_via: "callback_flow"
                    source: "external_app"
      responses:
        '201':
          description: System created successfully and callback executed
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "system created successfully"
                  data:
                    type: object
                    properties:
                      system:
                        $ref: '#/components/schemas/System'
                      callback_executed:
                        type: boolean
                        description: Whether the callback was successfully executed
                        example: true
        '400':
          description: Bad request - invalid parameters or expired state token
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    enum:
                      - "invalid or already used state token"
                      - "state token expired"
                      - "state token already used"
                    example: "state token expired"
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        example: "state token expired"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /systems/{id}:
    get:
      operationId: getSystemById
      tags:
        - Backend - Systems
      summary: /systems/{id} - Get single system
      description: Get a specific system by ID. Users can access systems created by their organization based on hierarchical permissions.
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
      responses:
        '200':
          description: System retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "system retrieved successfully"
                  data:
                    $ref: '#/components/schemas/System'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      operationId: updateSystem
      tags:
        - Backend - Systems
      summary: /systems/{id} - Update system
      description: Update a system. Users can update systems created by their organization based on hierarchical permissions.
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemInput'
      responses:
        '200':
          description: System updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "system updated successfully"
                  data:
                    $ref: '#/components/schemas/System'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      operationId: deleteSystem
      tags:
        - Backend - Systems
      summary: /systems/{id} - Delete system
      description: Delete a system. Users can delete systems created by their organization based on hierarchical permissions.
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
      responses:
        '200':
          description: System deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "system deleted successfully"
                  data:
                    type: object
                    nullable: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /systems/{id}/regenerate-secret:
    post:
      operationId: regenerateSystemSecret
      tags:
        - Backend - Systems
      summary: /systems/{id}/regenerate-secret - Regenerate system secret
      description: Regenerate authentication secret for a specific system. Users can regenerate secrets for systems created by their organization based on hierarchical permissions.
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
      responses:
        '200':
          description: System secret regenerated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "system secret regenerated successfully"
                  data:
                    type: object
                    properties:
                      secret:
                        type: string
                        description: New system secret
                        example: "new_secret_123456789"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /systems/totals:
    get:
      operationId: getSystemsTotals
      tags:
        - Backend - Systems
      summary: /systems/totals - Get systems status summary
      description: Get systems heartbeat status summary for dashboard (requires Admin or Support role)
      parameters:
        - name: timeout
          in: query
          description: Timeout in minutes for alive/dead determination
          schema:
            type: integer
            minimum: 1
            maximum: 60
            default: 15
            example: 15
      responses:
        '200':
          description: Systems status summary retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "system status retrieved"
                  data:
                    $ref: '#/components/schemas/SystemTotals'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /systems/{id}/inventory:
    get:
      operationId: getSystemInventory
      tags:
        - Backend - Systems
      summary: /systems/{id}/inventory - Get system inventory history
      description: Get paginated inventory history for a specific system
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: Inventory history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "inventory history retrieved successfully"
                  data:
                    type: object
                    properties:
                      inventories:
                        type: array
                        items:
                          type: object
                          description: Inventory record
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /systems/{id}/inventory/latest:
    get:
      operationId: getSystemInventoryLatest
      tags:
        - Backend - Systems
      summary: /systems/{id}/inventory/latest - Get latest system inventory
      description: Get the most recent inventory data for a specific system
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
      responses:
        '200':
          description: Latest inventory retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "latest inventory retrieved successfully"
                  data:
                    type: object
                    description: Latest inventory data
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /systems/{id}/inventory/changes:
    get:
      operationId: getSystemInventoryChanges
      tags:
        - Backend - Systems
      summary: /systems/{id}/inventory/changes - Get inventory changes summary
      description: Get paginated summary of inventory changes for a specific system
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: Inventory changes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "inventory changes retrieved successfully"
                  data:
                    type: object
                    properties:
                      changes:
                        type: array
                        items:
                          type: object
                          description: Inventory change record
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /systems/{id}/inventory/changes/latest:
    get:
      operationId: getSystemInventoryChangesLatest
      tags:
        - Backend - Systems
      summary: /systems/{id}/inventory/changes/latest - Get latest inventory changes
      description: Get the most recent batch of inventory changes for a specific system
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
      responses:
        '200':
          description: Latest inventory changes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "latest inventory changes retrieved successfully"
                  data:
                    type: object
                    description: Latest inventory changes data
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /systems/{id}/inventory/diffs:
    get:
      operationId: getSystemInventoryDiffs
      tags:
        - Backend - Systems
      summary: /systems/{id}/inventory/diffs - Get inventory diffs
      description: Get paginated inventory diffs for a specific system
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: Inventory diffs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "inventory diffs retrieved successfully"
                  data:
                    type: object
                    properties:
                      diffs:
                        type: array
                        items:
                          type: object
                          description: Inventory diff record
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /systems/{id}/inventory/diffs/latest:
    get:
      operationId: getSystemInventoryDiffsLatest
      tags:
        - Backend - Systems
      summary: /systems/{id}/inventory/diffs/latest - Get latest inventory diff
      description: Get the most recent inventory diff for a specific system
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
      responses:
        '200':
          description: Latest inventory diff retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "latest inventory diff retrieved successfully"
                  data:
                    type: object
                    description: Latest inventory diff data
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /user/permissions:
    get:
      operationId: getUserPermissions
      tags:
        - Backend - User
      summary: /user/permissions - Get user permissions (OAuth2/OIDC)
      description: Get current user permissions using standard OAuth2/OIDC flow with Logto token
      responses:
        '200':
          description: User permissions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "user permissions retrieved successfully"
                  data:
                    type: object
                    properties:
                      user_roles:
                        type: array
                        items:
                          type: string
                        example: ["Admin"]
                      user_permissions:
                        type: array
                        items:
                          type: string
                        example: ["manage:systems", "read:systems"]
                      org_role:
                        type: string
                        example: "Owner"
                      org_permissions:
                        type: array
                        items:
                          type: string
                        example: ["manage:resellers", "create:customers"]
                      organization_id:
                        type: string
                        example: "org_123456789"
                      organization_name:
                        type: string
                        example: "ACME Corp"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /user/profile:
    get:
      operationId: getUserProfile
      tags:
        - Backend - User
      summary: /user/profile - Get user profile (OAuth2/OIDC)
      description: Get current user profile using standard OAuth2/OIDC flow with Logto token
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "user profile retrieved successfully"
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ===========================================
  # COLLECT SERVICE ENDPOINTS
  # ===========================================

  /systems/inventory:
    post:
      operationId: collectSystemInventory
      servers:
        - url: https://collect.your-domain.com/api
          description: Collect API server (port 8081)
      tags:
        - Collect - Systems
      summary: /systems/inventory - Collect system inventory
      description: System inventory collection endpoint with HTTP Basic authentication
      security:
        - BasicAuth: [system_id:system_secret]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: System inventory data
                  additionalProperties: true
                  example: {
                    "os": {
                        "name": "my.server",
                        "type": "ns8",
                        "family": "NethServer",
                        "release": {
                            "full": "1.3.5",
                            "major": 1,
                            "minor": 3,
                            "patch": 5
                        }
                    }
                  }
      responses:
        '202':
          description: Inventory received and queued for processing
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Inventory received and queued for processing"
                  data:
                    type: object
                    properties:
                      data_size:
                        type: integer
                        description: Inventory data size in bytes
                        example: 10145
                      message:
                        type: string
                        description: A message from server
                        example: "Your inventory data has been received and will be processed shortly"
                      queue_status:
                        type: string
                        description: Queue status message
                        example: "queued"
                      system_id:
                        type: string
                        description: System ID
                        example: "4cf3053f-d0d5-4b10-b752-ff8f7b63c2f7"
                      timestamp:
                        type: string
                        format: date-time
                        description: Timestamp of received inventory
                        example: "2025-07-16T15:46:51.571831+02:00"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: Request Entity Too Large
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 413
                  message:
                    type: string
                    example: "Request too large"
                  data:
                    type: object
                    properties:
                      max_size_bytes:
                        type: integer
                        description: Maximum allowed request size in bytes
                        example: 10485760
                      received_bytes:
                        type: integer
                        description: Size of received request in bytes
                        example: 20971520
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: "Failed to process inventory"
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        example: "Processing queue unavailable"

  /systems/heartbeat:
    post:
      operationId: sendSystemHeartbeat
      servers:
        - url: https://collect.your-domain.com/api
          description: Collect API server (port 8081)
      tags:
        - Collect - Systems
      summary: /systems/heartbeat - System heartbeat
      description: System heartbeat endpoint to track system liveness (every 10 minutes)
      security:
        - BasicAuth: [system_id:system_secret]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                system_id:
                  type: string
                  description: System ID sending the heartbeat
                  example: "4cf3053f-d0d5-4b10-b752-ff8f7b63c2f7"
              required:
                - system_id
      responses:
        '200':
          description: Heartbeat acknowledged
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "heartbeat acknowledged"
                  data:
                    type: object
                    properties:
                      system_id:
                        type: string
                        description: System ID
                        example: "4cf3053f-d0d5-4b10-b752-ff8f7b63c2f7"
                      acknowledged:
                        type: boolean
                        description: Whether heartbeat was acknowledged
                        example: true
                      last_heartbeat:
                        type: string
                        format: date-time
                        description: Timestamp of this heartbeat
                        example: "2025-07-21T10:25:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /validators/vat/{entity_type}:
    get:
      operationId: validateVAT
      tags:
        - Backend - Validators
      summary: Validate VAT number
      description: Check if a VAT number exists in the specified entity type (distributors, resellers, customers)
      parameters:
        - name: entity_type
          in: path
          required: true
          description: Type of entity to check VAT against
          schema:
            type: string
            enum: [distributors, resellers, customers]
            example: "customers"
        - name: vat
          in: query
          required: true
          description: VAT number to validate
          schema:
            type: string
            example: "12345678901"
        - name: exclude_id
          in: query
          required: false
          description: Entity ID to exclude from check (useful for updates)
          schema:
            type: string
            example: "cust_123456789"
      responses:
        '200':
          description: VAT validation completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "VAT validation completed"
                  data:
                    $ref: '#/components/schemas/VATValidationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
