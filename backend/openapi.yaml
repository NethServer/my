openapi: 3.0.3
info:
  title: Nethesis Operation Center API
  description: REST API for Nethesis Operation Center with business hierarchy management and RBAC
  version: 1.0.0
  contact:
    name: Nethesis S.r.l.
    url: http://www.nethesis.it
    email: info@nethesis.it
  license:
    name: AGPL-3.0-or-later
    url: https://www.gnu.org/licenses/agpl-3.0.html

servers:
  - url: http://localhost:8080/api
    description: Backend API server (port 8080)
  - url: http://localhost:8081/api
    description: Collect API server (port 8081)

tags:

  - name: Backend - Accounts
    description: Backend account management with RBAC
  - name: Backend - Applications
    description: Backend third-party application management
  - name: Backend - Authentication
    description: Backend authentication and token management
  - name: Backend - Customers
    description: Backend customer management
  - name: Backend - Distributors
    description: Backend distributor management
  - name: Backend - Health
    description: Backend service health monitoring
  - name: Backend - Organizations
    description: Backend organization hierarchy management
  - name: Backend - Resellers
    description: Backend reseller management
  - name: Backend - Roles
    description: Backend role management
  - name: Backend - Statistics
    description: Backend system statistics
  - name: Backend - Systems
    description: Backend system management and inventory
  - name: Backend - User
    description: Backend user profile and permissions


  - name: Collect - Health
    description: Collect service health and monitoring
  - name: Collect - Systems
    description: Collect service system management and inventory collection

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token from auth exchange endpoint
    BasicAuth:
      type: http
      scheme: basic
      description: HTTP Basic authentication for system inventory collection

  schemas:
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: HTTP error code
          example: 400
        message:
          type: string
          description: Error message
          example: "validation failed"
        data:
          $ref: '#/components/schemas/ErrorData'

    ErrorData:
      type: object
      properties:
        type:
          type: string
          enum: [validation_error, external_api_error]
          description: Type of error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        details:
          description: Additional error details

    ValidationError:
      type: object
      properties:
        key:
          type: string
          description: Field name that failed validation
          example: "username"
        message:
          type: string
          description: Error code or message
          example: "required"
        value:
          type: string
          description: Value that failed validation
          example: ""

    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          description: Current page number
          example: 1
        page_size:
          type: integer
          minimum: 1
          maximum: 100
          description: Number of items per page
          example: 20
        total_count:
          type: integer
          minimum: 0
          description: Total number of items
          example: 156
        total_pages:
          type: integer
          minimum: 0
          description: Total number of pages
          example: 8
        has_next:
          type: boolean
          description: Whether there is a next page
          example: true
        has_prev:
          type: boolean
          description: Whether there is a previous page
          example: false
        next_page:
          type: integer
          nullable: true
          description: Next page number if available
          example: 2
        prev_page:
          type: integer
          nullable: true
          description: Previous page number if available
          example: null

    TokenExchangeRequest:
      type: object
      required:
        - access_token
      properties:
        access_token:
          type: string
          description: Logto access token to exchange
          example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."

    TokenRefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          description: Refresh token to exchange for new access token
          example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token (24h)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          description: Refresh token (7 days)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 86400
        user:
          $ref: '#/components/schemas/UserProfile'

    UserProfile:
      type: object
      properties:
        id:
          type: string
          description: User ID
          example: "user_123456789"
        username:
          type: string
          description: Username
          example: "john.doe"
        email:
          type: string
          format: email
          description: User email address
          example: "john@example.com"
        name:
          type: string
          description: Full name
          example: "John Doe"
        userRoles:
          type: array
          items:
            type: string
          description: User role names
          example: ["Admin"]
        userRoleIds:
          type: array
          items:
            type: string
          description: User role IDs
          example: ["rol_admin_id_123"]
        userPermissions:
          type: array
          items:
            type: string
          description: User permissions from roles
          example: ["destroy:systems", "manage:systems", "read:systems"]
        orgRole:
          type: string
          description: Organization role name
          example: "Owner"
        orgRoleId:
          type: string
          description: Organization role ID
          example: "org_rol_owner_456"
        orgPermissions:
          type: array
          items:
            type: string
          description: Organization permissions
          example: ["create:distributors", "manage:distributors"]
        organizationId:
          type: string
          description: Organization ID
          example: "org_123"
        organizationName:
          type: string
          description: Organization name
          example: "ACME Distribution"

    Organization:
      type: object
      properties:
        id:
          type: string
          description: Organization ID
          example: "org_123456789"
        name:
          type: string
          description: Organization name
          example: "ACME Distribution SpA"
        description:
          type: string
          description: Organization description
          example: "Main distributor for Italian and Swiss markets"
        customData:
          type: object
          description: Custom organization data
          additionalProperties: true
          example:
            email: "contact@acme-distribution.com"
            contactPerson: "John Smith"
            region: "Italy"
        isMfaRequired:
          type: boolean
          description: Whether MFA is required for this organization
          example: false
        branding:
          $ref: '#/components/schemas/OrganizationBranding'

    OrganizationInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Organization name
          example: "ACME Distribution SpA"
        description:
          type: string
          description: Organization description
          example: "Main distributor for Italian and Swiss markets"
        customData:
          type: object
          description: Custom organization data
          additionalProperties: true
          example:
            email: "contact@acme-distribution.com"
            contactPerson: "John Smith"
            region: "Italy"
        isMfaRequired:
          type: boolean
          description: Whether MFA is required for this organization
          example: false

    Account:
      type: object
      properties:
        id:
          type: string
          description: User account ID
          example: "usr_123456789"
        username:
          type: string
          description: Username
          example: "john.doe"
        email:
          type: string
          format: email
          description: Email address
          example: "john@example.com"
        name:
          type: string
          description: Full name
          example: "John Doe"
        phone:
          type: string
          description: Phone number
          example: "+39 333 123456"
        userRoleIds:
          type: array
          items:
            type: string
          description: User role IDs
          example: ["rol_admin_id"]
        organizationId:
          type: string
          description: Organization ID
          example: "org_123456789"
        organizationName:
          type: string
          description: Organization name
          example: "ACME Corp"
        organizationRole:
          type: string
          description: Organization role name
          example: "Admin"
        isSuspended:
          type: boolean
          description: Whether the account is suspended
          example: false
        lastSignInAt:
          type: string
          format: date-time
          description: Last sign in timestamp
          example: "2025-06-25T09:15:00Z"
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2025-06-20T14:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-06-21T10:45:00Z"
        customData:
          type: object
          description: Custom user data
          additionalProperties: true
          example:
            department: "IT"
            position: "Senior Developer"

    AccountInput:
      type: object
      required:
        - email
        - name
        - password
        - userRoleIds
        - organizationId
      properties:
        email:
          type: string
          format: email
          description: Email address (username will be generated automatically)
          example: "john.doe@acme.com"
        name:
          type: string
          description: Full name
          example: "John Doe"
        password:
          type: string
          minLength: 12
          maxLength: 128
          description: |
            Password meeting security requirements:
            - At least 12 characters long
            - At least one uppercase letter (A-Z)
            - At least one lowercase letter (a-z)
            - At least one digit (0-9)
            - At least one special character (!@#$%^&*...)
            - No more than 3 consecutive identical characters
            - Cannot contain common weak patterns
          example: "MySecureP4ssw9rd!"
        userRoleIds:
          type: array
          items:
            type: string
          description: User role IDs to assign
          example: ["rol_abc123def456", "rol_xyz789abc123"]
        organizationId:
          type: string
          description: Organization ID to assign user to
          example: "org_xyz789"
        phone:
          type: string
          description: Phone number
          example: "+39 333 123456"
        customData:
          type: object
          description: Custom user data
          additionalProperties: true
          example:
            department: "IT"
            position: "Senior Developer"

    AccountUpdate:
      type: object
      properties:
        name:
          type: string
          description: Full name
          example: "John Doe (Updated)"
        userRoleIds:
          type: array
          items:
            type: string
          description: User role IDs to assign
          example: ["rol_new_role_id_here", "rol_another_id"]
        phone:
          type: string
          description: Phone number
          example: "+39 333 123456"
        customData:
          type: object
          description: Custom user data
          additionalProperties: true
          example:
            department: "Sales"
            location: "Rome"

    PasswordResetRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          minLength: 12
          maxLength: 128
          description: |
            Password meeting security requirements:
            - At least 12 characters long
            - At least one uppercase letter (A-Z)
            - At least one lowercase letter (a-z)
            - At least one digit (0-9)
            - At least one special character (!@#$%^&*...)
            - No more than 3 consecutive identical characters
            - Cannot contain common weak patterns
          example: "MySecureP4ssw9rd!"

    Role:
      type: object
      properties:
        id:
          type: string
          description: Role ID
          example: "rol_admin_123"
        name:
          type: string
          description: Role name
          example: "Admin"
        description:
          type: string
          description: Role description
          example: "Full system administration capabilities"

    OrganizationRole:
      type: object
      properties:
        id:
          type: string
          description: Organization role ID
          example: "org_rol_owner_123"
        name:
          type: string
          description: Organization role name
          example: "Owner"
        description:
          type: string
          description: Organization role description
          example: "Complete control over organization and business hierarchy"

    OrganizationReference:
      type: object
      properties:
        id:
          type: string
          description: Organization ID
          example: "org_123456789"
        name:
          type: string
          description: Organization name
          example: "ACME Corp"
        description:
          type: string
          description: Organization description
          example: "Main customer organization"
        type:
          type: string
          enum: [owner, distributor, reseller, customer]
          description: Organization type
          example: "customer"
        branding:
          $ref: '#/components/schemas/OrganizationBranding'

    OrganizationBranding:
      type: object
      properties:
        logo_url:
          type: string
          description: Organization logo URL
          example: "https://cdn.example.com/logos/org-console.png"
        dark_logo_url:
          type: string
          description: Organization dark theme logo URL
          example: "https://cdn.example.com/logos/org-console-dark.png"

    ThirdPartyApplication:
      type: object
      properties:
        id:
          type: string
          description: Application ID
          example: "app_123456789"
        name:
          type: string
          description: Application name (FQDN)
          example: "management.company.com"
        description:
          type: string
          description: Application description
          example: "Management interface for system administrators"
        redirect_uris:
          type: array
          items:
            type: string
          description: OAuth redirect URIs
          example: ["https://management.company.com/callback"]
        post_logout_redirect_uris:
          type: array
          items:
            type: string
          description: Post logout redirect URIs
          example: ["https://management.company.com"]
        login_url:
          type: string
          description: OAuth2 login URL with dynamic scopes and parameters
          example: "https://tree6d.logto.app/oidc/auth?client_id=app_123456789&redirect_uri=https%3A%2F%2Fmanagement.company.com%2Fcallback&response_type=code&scope=openid+profile+email+roles&state=random-state-string"
        branding:
          $ref: '#/components/schemas/ApplicationBranding'

    ApplicationBranding:
      type: object
      properties:
        display_name:
          type: string
          description: Application display name
          example: "Management Console"
        logo_url:
          type: string
          description: Application logo URL
          example: "https://cdn.example.com/logos/management-console.png"
        dark_logo_url:
          type: string
          description: Application dark theme logo URL
          example: "https://cdn.example.com/logos/management-console-dark.png"

    SystemStats:
      type: object
      properties:
        distributors:
          type: integer
          description: Number of distributors
          example: 125
        resellers:
          type: integer
          description: Number of resellers
          example: 1847
        customers:
          type: integer
          description: Number of customers
          example: 8934
        users:
          type: integer
          description: Number of users
          example: 24567
        systems:
          type: object
          description: System heartbeat statistics
          properties:
            total:
              type: integer
              description: Total number of systems
              example: 1250
            alive:
              type: integer
              description: Number of systems that communicated within the last 15 minutes
              example: 1100
            dead:
              type: integer
              description: Number of systems that communicated but not within the last 15 minutes
              example: 100
            zombie:
              type: integer
              description: Number of systems that were created but never communicated
              example: 50
        timestamp:
          type: string
          format: date-time
          description: Statistics timestamp
          example: "2025-07-08T14:30:00Z"
        isStale:
          type: boolean
          description: Whether the statistics are stale
          example: false

    System:
      type: object
      properties:
        id:
          type: string
          description: System ID
          example: "4cf3053f-d0d5-4b10-b752-ff8f7b63c2f7"
        name:
          type: string
          description: System name
          example: "Production Server 01"
        type:
          type: string
          description: System type
          example: "ns8"
        status:
          type: string
          enum: [online, offline, maintenance]
          description: System operational status
          example: "online"
        fqdn:
          type: string
          description: Fully qualified domain name
          example: "prod-web-01.example.com"
        ipv4_address:
          type: string
          description: IPv4 address
          example: "192.168.1.100"
        ipv6_address:
          type: string
          description: IPv6 address
          example: "2001:db8::1"
        version:
          type: string
          description: System version
          example: "2.1.4"
        last_seen:
          type: string
          format: date-time
          description: Last seen timestamp from inventory
          example: "2025-07-10T10:30:00Z"
        customer_id:
          type: string
          description: Customer organization ID
          example: "org_customer_123"
        custom_data:
          type: object
          description: Custom system data
          additionalProperties: true
          example:
            datacenter: "EU-West-1"
            environment: "production"
            tier: "web"
        secret_hint:
          type: string
          description: Last 4 characters of system secret for identification
          example: "a7b9"
        created_at:
          type: string
          format: date-time
          description: System creation timestamp
          example: "2025-07-01T09:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: System last update timestamp
          example: "2025-07-10T10:30:00Z"
        created_by:
          $ref: '#/components/schemas/SystemCreator'
        # Heartbeat status fields
        heartbeat_status:
          type: string
          enum: [alive, dead, zombie]
          description: System heartbeat status (alive=<15min, dead=>15min, zombie=never communicated)
          example: "alive"
        last_heartbeat:
          type: string
          format: date-time
          description: Last heartbeat timestamp
          example: "2025-07-21T10:25:00Z"
        heartbeat_minutes:
          type: integer
          description: Minutes since last heartbeat
          example: 5

    SystemCreator:
      type: object
      properties:
        user_id:
          type: string
          description: User ID who created the system
          example: "usr_123456789"
        user_name:
          type: string
          description: Username who created the system
          example: "admin"
        organization_id:
          type: string
          description: Organization ID of the creator
          example: "org_123456789"
        organization_name:
          type: string
          description: Organization name of the creator
          example: "Nethesis"

    SystemInput:
      type: object
      required:
        - name
        - hostname
        - organizationId
      properties:
        name:
          type: string
          description: System name
          example: "Production Server 01"
        description:
          type: string
          description: System description
          example: "Main production server for web applications"
        hostname:
          type: string
          description: System hostname
          example: "prod-web-01.example.com"
        ipAddress:
          type: string
          description: System IP address
          example: "192.168.1.100"
        version:
          type: string
          description: System version
          example: "2.1.4"
        organizationId:
          type: string
          description: Organization ID that owns this system
          example: "org_123456789"
        customData:
          type: object
          description: Custom system data
          additionalProperties: true
          example:
            datacenter: "EU-West-1"
            environment: "production"
            tier: "web"


  parameters:
    PageParam:
      name: page
      in: query
      description: Page number
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
        example: 1

    PageSizeParam:
      name: page_size
      in: query
      description: Items per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
        example: 20

    SearchParam:
      name: search
      in: query
      description: Search term
      required: false
      schema:
        type: string
        minLength: 1
        example: "acme"

  responses:
    BadRequest:
      description: Bad request - validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized - invalid or missing token
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 401
              message:
                type: string
                example: "invalid token"
              data:
                type: object
                nullable: true
                example: null

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 403
              message:
                type: string
                example: "insufficient permissions"
              data:
                type: object
                nullable: true
                example: null

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    UnprocessableEntity:
      description: Unprocessable entity - business logic error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 500
              message:
                type: string
                example: "internal server error"
              data:
                type: object
                nullable: true
                example: null

paths:
  /accounts:
    get:
      tags:
        - Backend - Accounts
      summary: List accounts
      description: Get paginated list of user accounts with hierarchical authorization
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SearchParam'
      responses:
        '200':
          description: Accounts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "accounts retrieved successfully"
                  data:
                    type: object
                    properties:
                      accounts:
                        type: array
                        items:
                          $ref: '#/components/schemas/Account'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Backend - Accounts
      summary: Create account
      description: Create a new user account with hierarchical authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountInput'
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "account created successfully"
                  data:
                    $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /accounts/{id}:
    get:
      tags:
        - Backend - Accounts
      summary: Get single account
      description: Get a specific account by ID with hierarchical authorization
      parameters:
        - name: id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            example: "usr_123456789"
      responses:
        '200':
          description: Account retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "account retrieved successfully"
                  data:
                    $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Backend - Accounts
      summary: Update account
      description: Update a user account with hierarchical authorization
      parameters:
        - name: id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            example: "usr_123456789"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdate'
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "account updated successfully"
                  data:
                    $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

    delete:
      tags:
        - Backend - Accounts
      summary: Delete account
      description: Delete a user account with hierarchical authorization
      parameters:
        - name: id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            example: "usr_123456789"
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "account deleted successfully"
                  data:
                    type: object
                    nullable: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /accounts/{id}/password:
    patch:
      tags:
        - Backend - Accounts
      summary: Reset account password
      description: Reset a user account's password (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            example: "usr_123456789"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "password reset successfully"
                  data:
                    type: object
                    nullable: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /applications:
    get:
      tags:
        - Backend - Applications
      summary: Get third-party applications
      description: Get third-party applications filtered by user's organization and user roles
      responses:
        '200':
          description: Applications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Applications retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ThirdPartyApplication'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Failed to fetch applications from Logto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/exchange:
    post:
      tags:
        - Backend - Authentication
      summary: Exchange Logto token for custom JWT
      description: Exchange a Logto access token for a custom JWT with embedded permissions
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenExchangeRequest'
      responses:
        '200':
          description: Token exchange successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "token exchange successful"
                  data:
                    $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/me:
    get:
      tags:
        - Backend - Authentication
      summary: Get current user information
      description: Get current authenticated user's profile and permissions
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "user information retrieved successfully"
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags:
        - Backend - Authentication
      summary: Refresh access token
      description: Get new access token using refresh token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
      responses:
        '200':
          description: Token refresh successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "token refresh successful"
                  data:
                    $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'


  /customers:
    get:
      tags:
        - Backend - Customers
      summary: List customers
      description: Get paginated list of customers (Owner + Distributor + Reseller)
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SearchParam'
      responses:
        '200':
          description: Customers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "customers retrieved successfully"
                  data:
                    type: object
                    properties:
                      customers:
                        type: array
                        items:
                          $ref: '#/components/schemas/Organization'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Backend - Customers
      summary: Create customer
      description: Create a new customer organization (Owner + Distributor + Reseller)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "customer created successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /customers/{id}:
    get:
      tags:
        - Backend - Customers
      summary: Get single customer
      description: Get a specific customer by ID (Owner + Distributor + Reseller)
      parameters:
        - name: id
          in: path
          required: true
          description: Customer organization ID
          schema:
            type: string
            example: "org_456789123"
      responses:
        '200':
          description: Customer retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "customer retrieved successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Backend - Customers
      summary: Update customer
      description: Update a customer organization (Owner + Distributor + Reseller)
      parameters:
        - name: id
          in: path
          required: true
          description: Customer organization ID
          schema:
            type: string
            example: "org_456789123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "customer updated successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

    delete:
      tags:
        - Backend - Customers
      summary: Delete customer
      description: Delete a customer organization (Owner + Distributor + Reseller)
      parameters:
        - name: id
          in: path
          required: true
          description: Customer organization ID
          schema:
            type: string
            example: "org_456789123"
      responses:
        '200':
          description: Customer deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "customer deleted successfully"
                  data:
                    type: object
                    nullable: true

  /distributors:
    get:
      tags:
        - Backend - Distributors
      summary: List distributors
      description: Get paginated list of distributors (Owner only)
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SearchParam'
      responses:
        '200':
          description: Distributors retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "distributors retrieved successfully"
                  data:
                    type: object
                    properties:
                      distributors:
                        type: array
                        items:
                          $ref: '#/components/schemas/Organization'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Backend - Distributors
      summary: Create distributor
      description: Create a new distributor organization (Owner only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
      responses:
        '201':
          description: Distributor created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "distributor created successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /distributors/{id}:
    get:
      tags:
        - Backend - Distributors
      summary: Get single distributor
      description: Get a specific distributor by ID (Owner only)
      parameters:
        - name: id
          in: path
          required: true
          description: Distributor organization ID
          schema:
            type: string
            example: "org_123456789"
      responses:
        '200':
          description: Distributor retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "distributor retrieved successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Backend - Distributors
      summary: Update distributor
      description: Update a distributor organization (Owner only)
      parameters:
        - name: id
          in: path
          required: true
          description: Distributor organization ID
          schema:
            type: string
            example: "org_123456789"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
      responses:
        '200':
          description: Distributor updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "distributor updated successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

    delete:
      tags:
        - Backend - Distributors
      summary: Delete distributor
      description: Delete a distributor organization (Owner only)
      parameters:
        - name: id
          in: path
          required: true
          description: Distributor organization ID
          schema:
            type: string
            example: "org_123456789"
      responses:
        '200':
          description: Distributor deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "distributor deleted successfully"
                  data:
                    type: object
                    nullable: true

  /health:
    get:
      tags:
        - Backend - Health
        - Collect - Health
      summary: Health check
      description: Check if the service is healthy (available on both backend and collect servers)
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "service healthy"
                  data:
                    type: object
                    description: Health data (collect includes worker metrics)
                    nullable: true
        '503':
          description: Service is unhealthy (collect service only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organization-roles:
    get:
      tags:
        - Backend - Roles
      summary: Get all organization roles
      description: Get all available organization roles with their IDs and descriptions
      responses:
        '200':
          description: Organization roles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "organization roles retrieved successfully"
                  data:
                    type: object
                    properties:
                      organizationRoles:
                        type: array
                        items:
                          $ref: '#/components/schemas/OrganizationRole'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /organizations:
    get:
      tags:
        - Backend - Organizations
      summary: Get available organizations
      description: Get organizations the current user can assign users to, filtered by business hierarchy
      responses:
        '200':
          description: Organizations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "organizations retrieved successfully"
                  data:
                    type: object
                    properties:
                      organizations:
                        type: array
                        items:
                          $ref: '#/components/schemas/OrganizationReference'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /resellers:
    get:
      tags:
        - Backend - Resellers
      summary: List resellers
      description: Get paginated list of resellers (Owner + Distributor)
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SearchParam'
      responses:
        '200':
          description: Resellers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "resellers retrieved successfully"
                  data:
                    type: object
                    properties:
                      resellers:
                        type: array
                        items:
                          $ref: '#/components/schemas/Organization'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Backend - Resellers
      summary: Create reseller
      description: Create a new reseller organization (Owner + Distributor)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
      responses:
        '201':
          description: Reseller created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "reseller created successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /resellers/{id}:
    get:
      tags:
        - Backend - Resellers
      summary: Get single reseller
      description: Get a specific reseller by ID (Owner + Distributor)
      parameters:
        - name: id
          in: path
          required: true
          description: Reseller organization ID
          schema:
            type: string
            example: "org_987654321"
      responses:
        '200':
          description: Reseller retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "reseller retrieved successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Backend - Resellers
      summary: Update reseller
      description: Update a reseller organization (Owner + Distributor)
      parameters:
        - name: id
          in: path
          required: true
          description: Reseller organization ID
          schema:
            type: string
            example: "org_987654321"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
      responses:
        '200':
          description: Reseller updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "reseller updated successfully"
                  data:
                    $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

    delete:
      tags:
        - Backend - Resellers
      summary: Delete reseller
      description: Delete a reseller organization (Owner + Distributor)
      parameters:
        - name: id
          in: path
          required: true
          description: Reseller organization ID
          schema:
            type: string
            example: "org_987654321"
      responses:
        '200':
          description: Reseller deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "reseller deleted successfully"
                  data:
                    type: object
                    nullable: true

  /roles:
    get:
      tags:
        - Backend - Roles
      summary: Get all user roles
      description: Get all available user roles with their IDs and descriptions
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "roles retrieved successfully"
                  data:
                    type: object
                    properties:
                      roles:
                        type: array
                        items:
                          $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /stats:
    get:
      tags:
        - Backend - Statistics
      summary: Get statistics
      description: Get system statistics (Owner only)
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "statistics retrieved successfully"
                  data:
                    $ref: '#/components/schemas/SystemStats'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /systems:
    get:
      tags:
        - Backend - Systems
      summary: List systems
      description: Get list of systems (requires Admin or Support role)
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SearchParam'
      responses:
        '200':
          description: Systems retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "systems retrieved successfully"
                  data:
                    type: object
                    properties:
                      systems:
                        type: array
                        items:
                          $ref: '#/components/schemas/System'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Backend - Systems
      summary: Create system
      description: Create a new system (requires Admin or Support role)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemInput'
      responses:
        '201':
          description: System created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "system created successfully"
                  data:
                    $ref: '#/components/schemas/System'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /systems/{id}:
    get:
      tags:
        - Backend - Systems
      summary: Get single system
      description: Get a specific system by ID (requires Admin or Support role)
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
      responses:
        '200':
          description: System retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "system retrieved successfully"
                  data:
                    $ref: '#/components/schemas/System'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Backend - Systems
      summary: Update system
      description: Update a system (requires Admin or Support role)
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemInput'
      responses:
        '200':
          description: System updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "system updated successfully"
                  data:
                    $ref: '#/components/schemas/System'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Backend - Systems
      summary: Delete system
      description: Delete a system (requires Admin or Support role)
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
      responses:
        '200':
          description: System deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "system deleted successfully"
                  data:
                    type: object
                    nullable: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /systems/{id}/regenerate-secret:
    post:
      tags:
        - Backend - Systems
      summary: Regenerate system secret
      description: Regenerate authentication secret for a specific system (requires Admin or Support role)
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
      responses:
        '200':
          description: System secret regenerated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "system secret regenerated successfully"
                  data:
                    type: object
                    properties:
                      secret:
                        type: string
                        description: New system secret
                        example: "new_secret_123456789"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /systems/status:
    get:
      tags:
        - Backend - Systems
      summary: Get systems status summary
      description: Get systems heartbeat status summary for dashboard (requires Admin or Support role)
      parameters:
        - name: timeout
          in: query
          description: Timeout in minutes for alive/dead determination
          schema:
            type: integer
            minimum: 1
            maximum: 60
            default: 15
            example: 15
      responses:
        '200':
          description: Systems status summary retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "system status retrieved"
                  data:
                    type: object
                    properties:
                      total_systems:
                        type: integer
                        description: Total number of systems
                        example: 100
                      alive_systems:
                        type: integer
                        description: Number of systems with recent heartbeat
                        example: 85
                      dead_systems:
                        type: integer
                        description: Number of systems with old heartbeat
                        example: 10
                      zombie_systems:
                        type: integer
                        description: Number of systems that never communicated
                        example: 5
                      timeout_minutes:
                        type: integer
                        description: Timeout used for alive/dead determination
                        example: 15
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /systems/{id}/inventory:
    get:
      tags:
        - Backend - Systems
      summary: Get system inventory history
      description: Get paginated inventory history for a specific system
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: Inventory history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "inventory history retrieved successfully"
                  data:
                    type: object
                    properties:
                      inventories:
                        type: array
                        items:
                          type: object
                          description: Inventory record
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /systems/{id}/inventory/latest:
    get:
      tags:
        - Backend - Systems
      summary: Get latest system inventory
      description: Get the most recent inventory data for a specific system
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
      responses:
        '200':
          description: Latest inventory retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "latest inventory retrieved successfully"
                  data:
                    type: object
                    description: Latest inventory data
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /systems/{id}/inventory/changes:
    get:
      tags:
        - Backend - Systems
      summary: Get inventory changes summary
      description: Get paginated summary of inventory changes for a specific system
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: Inventory changes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "inventory changes retrieved successfully"
                  data:
                    type: object
                    properties:
                      changes:
                        type: array
                        items:
                          type: object
                          description: Inventory change record
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /systems/{id}/inventory/changes/latest:
    get:
      tags:
        - Backend - Systems
      summary: Get latest inventory changes
      description: Get the most recent batch of inventory changes for a specific system
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
      responses:
        '200':
          description: Latest inventory changes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "latest inventory changes retrieved successfully"
                  data:
                    type: object
                    description: Latest inventory changes data
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /systems/{id}/inventory/diffs:
    get:
      tags:
        - Backend - Systems
      summary: Get inventory diffs
      description: Get paginated inventory diffs for a specific system
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: Inventory diffs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "inventory diffs retrieved successfully"
                  data:
                    type: object
                    properties:
                      diffs:
                        type: array
                        items:
                          type: object
                          description: Inventory diff record
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /systems/{id}/inventory/diffs/latest:
    get:
      tags:
        - Backend - Systems
      summary: Get latest inventory diff
      description: Get the most recent inventory diff for a specific system
      parameters:
        - name: id
          in: path
          required: true
          description: System ID
          schema:
            type: string
            example: "sys_123456789"
      responses:
        '200':
          description: Latest inventory diff retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "latest inventory diff retrieved successfully"
                  data:
                    type: object
                    description: Latest inventory diff data
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /user/permissions:
    get:
      tags:
        - Backend - User
      summary: Get user permissions (OAuth2/OIDC)
      description: Get current user permissions using standard OAuth2/OIDC flow with Logto token
      responses:
        '200':
          description: User permissions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "user permissions retrieved successfully"
                  data:
                    type: object
                    properties:
                      user_roles:
                        type: array
                        items:
                          type: string
                        example: ["Admin"]
                      user_permissions:
                        type: array
                        items:
                          type: string
                        example: ["manage:systems", "read:systems"]
                      org_role:
                        type: string
                        example: "Owner"
                      org_permissions:
                        type: array
                        items:
                          type: string
                        example: ["manage:resellers", "create:customers"]
                      organization_id:
                        type: string
                        example: "org_123456789"
                      organization_name:
                        type: string
                        example: "ACME Corp"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /user/profile:
    get:
      tags:
        - Backend - User
      summary: Get user profile (OAuth2/OIDC)
      description: Get current user profile using standard OAuth2/OIDC flow with Logto token
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "user profile retrieved successfully"
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ===========================================
  # COLLECT SERVICE ENDPOINTS
  # ===========================================

  /systems/inventory:
    post:
      servers:
        - url: http://localhost:8081/api
          description: Collect API server (port 8081)
      tags:
        - Collect - Systems
      summary: Collect system inventory
      description: System inventory collection endpoint with HTTP Basic authentication
      security:
        - BasicAuth: [system_id:system_secret]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: System inventory data
                  additionalProperties: true
                  example: {
                    "os": {
                        "name": "my.server",
                        "type": "ns8",
                        "family": "NethServer",
                        "release": {
                            "full": "1.3.5",
                            "major": 1,
                            "minor": 3,
                            "patch": 5
                        }
                    }
                  }
      responses:
        '202':
          description: Inventory received and queued for processing
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Inventory received and queued for processing"
                  data:
                    type: object
                    properties:
                      data_size:
                        type: integer
                        description: Inventory data size in bytes
                        example: 10145
                      message:
                        type: string
                        description: A message from server
                        example: "Your inventory data has been received and will be processed shortly"
                      queue_status:
                        type: string
                        description: Queue status message
                        example: "queued"
                      system_id:
                        type: string
                        description: System ID
                        example: "4cf3053f-d0d5-4b10-b752-ff8f7b63c2f7"
                      timestamp:
                        type: string
                        format: date-time
                        description: Timestamp of received inventory
                        example: "2025-07-16T15:46:51.571831+02:00"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: Request Entity Too Large
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 413
                  message:
                    type: string
                    example: "Request too large"
                  data:
                    type: object
                    properties:
                      max_size_bytes:
                        type: integer
                        description: Maximum allowed request size in bytes
                        example: 10485760
                      received_bytes:
                        type: integer
                        description: Size of received request in bytes
                        example: 20971520
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: "Failed to process inventory"
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        example: "Processing queue unavailable"

  /systems/heartbeat:
    post:
      servers:
        - url: http://localhost:8081/api
          description: Collect API server (port 8081)
      tags:
        - Collect - Systems
      summary: System heartbeat
      description: System heartbeat endpoint to track system liveness (every 10 minutes)
      security:
        - BasicAuth: [system_id:system_secret]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                system_id:
                  type: string
                  description: System ID sending the heartbeat
                  example: "4cf3053f-d0d5-4b10-b752-ff8f7b63c2f7"
              required:
                - system_id
      responses:
        '200':
          description: Heartbeat acknowledged
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "heartbeat acknowledged"
                  data:
                    type: object
                    properties:
                      system_id:
                        type: string
                        description: System ID
                        example: "4cf3053f-d0d5-4b10-b752-ff8f7b63c2f7"
                      acknowledged:
                        type: boolean
                        description: Whether heartbeat was acknowledged
                        example: true
                      last_heartbeat:
                        type: string
                        format: date-time
                        description: Timestamp of this heartbeat
                        example: "2025-07-21T10:25:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

